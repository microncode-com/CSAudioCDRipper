<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CSAudioCDRipper</name>
    </assembly>
    <members>
        <member name="P:AudioCDReaderLib.AudioCDReader.WaveFormat">
            <summary>
            Gets the <see cref="P:AudioCDReaderLib.AudioCDReader.WaveFormat" /> of the waveform-audio data.
            </summary>
        </member>
        <member name="T:AudioCDReaderLib.AudioCDReader.TrackInfo">
            <summary>
            The struct of the track information.
            </summary>
        </member>
        <member name="M:AudioCDReaderLib.AudioCDReader.CDIsReady(System.Int32)">
            <summary>
            Check if the CD drive is ready.
            </summary>
            <param name="DriveIndex">The CD drive index.</param>
            <returns></returns>
        </member>
        <member name="M:AudioCDReaderLib.AudioCDReader.EjectCD(System.Int32)">
            <summary>
            Eject the CD drive door.
            </summary>
            <param name="DriveIndex">The CD drive index.</param>
            <returns></returns>
        </member>
        <member name="M:AudioCDReaderLib.AudioCDReader.CloseCD(System.Int32)">
            <summary>
            Close the CD drive door.
            </summary>
            <param name="DriveIndex">The CD drive index.</param>
            <returns></returns>
        </member>
        <member name="M:AudioCDReaderLib.AudioCDReader.GetDevices">
            <summary>
            Get a list of the CD devices that installed on the local machine.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AudioCDReaderLib.AudioCDReader.LoadTracks(System.Int32)">
            <summary>
            Load all the tracks of the audio CD to the _m_lstTOC list.
            </summary>
            <param name="DriveIndex">The CD drive index.</param>
            <returns></returns>
        </member>
        <member name="M:AudioCDReaderLib.AudioCDReader.GetTracks(System.Int32)">
            <summary>
            Get all the tracks of the audio CD to the files list.
            </summary>
            <param name="DriveIndex">The CD drive index.</param>
            <returns></returns>
        </member>
        <member name="T:AudioCDReaderLib.Commands.ScsiInquiry">
            <summary>
            Vom Laufwerk zurückgegebene Inquiry Struktur
            </summary>
        </member>
        <member name="T:AudioCDReaderLib.Commands.ScsiFormatedTocTrack">
            <summary>
            Vom Laufwerk für Read Toc (Formatierte TOC)
            zurückgegebene Track Info Struktur
            </summary>
        </member>
        <member name="T:AudioCDReaderLib.Commands.ScsiFullTocPacket">
            <summary>
            Vom Laufwerk für Read Toc (komplette TOC)
            zurückgegebene Packet Struktur
            </summary>
        </member>
        <member name="T:AudioCDReaderLib.Commands.ScsiFormatedToc">
            <summary>
            Vom Laufwerk für Read Toc (Formatierte TOC)
            zurückgegebene Header Struktur
            </summary>
        </member>
        <member name="T:AudioCDReaderLib.Commands.ScsiFullToc">
            <summary>
            Vom Laufwerk für Read Toc (komplette TOC)
            zurückgegebene Header Struktur
            </summary>
        </member>
        <member name="T:AudioCDReaderLib.Commands.ScsiInquiryResult">
            <summary>
            Die wohl einzigst interessanten Daten von Inquiry
            </summary>
        </member>
        <member name="T:AudioCDReaderLib.Commands.ScsiTocTrack">
            <summary>
            Track Informationen
            </summary>
        </member>
        <member name="T:AudioCDReaderLib.Commands.ScsiTrackInformation">
            <summary>
            Von Read Track Information zurückgegebene Struktur
            </summary>
        </member>
        <member name="T:AudioCDReaderLib.Commands.ReadCDFlags">
            <summary>
            Flags für ReadCD
            </summary>
        </member>
        <member name="T:AudioCDReaderLib.Commands.RotationControl">
            <summary>
            Rotationsmodus für SetCDSpeed
            </summary>
        </member>
        <member name="T:AudioCDReaderLib.Commands.TrackType">
            <summary>
            Allgemeiner Typ der Daten eines Tracks
            </summary>
        </member>
        <member name="T:AudioCDReaderLib.Commands.TrackMode">
            <summary>
            Datenmodus eines Tracks
            </summary>
        </member>
        <member name="T:AudioCDReaderLib.Commands.QSubInfo">
            <summary>
            Im Q Sub-Channel gespeicherte Infos
            </summary>
        </member>
        <member name="T:AudioCDReaderLib.Commands.QSubControlFlags">
            <summary>
            Im Q Sub-Channel gespeicherte Infos
            </summary>
        </member>
        <member name="T:AudioCDReaderLib.Commands.TocFormat">
            <summary>
            TOC Format für ReadTOC
            </summary>
        </member>
        <member name="T:AudioCDReaderLib.Commands.TimeFormat">
            <summary>
            Zeitformat für ReadTOC (nur für FormatedToc)
            </summary>
        </member>
        <member name="T:AudioCDReaderLib.Commands.LoUnloadAction">
            <summary>
            Von LoadUnload auszuführende Aktion
            </summary>
        </member>
        <member name="T:AudioCDReaderLib.Commands.PreventRemovalAction">
            <summary>
            Von PreventMediumRemoval auszuführende Aktion
            </summary>
        </member>
        <member name="T:AudioCDReaderLib.Commands.PowerCondition">
            <summary>
            Zustand des Laufwerks setzen
            </summary>
        </member>
        <member name="M:AudioCDReaderLib.Commands.TestUnitReady(AudioCDReaderLib.Spti)">
            <summary>
            Prüft, ob Laufwerk bereit.
            Diesen Befehl muss jedes Laufwerk kennen.
            </summary>
            <param name="device">Spti Wrapper</param>
            <returns>Status des Befehls</returns>
        </member>
        <member name="M:AudioCDReaderLib.Commands.Inquiry(AudioCDReaderLib.Spti,AudioCDReaderLib.Commands.ScsiInquiryResult@)">
            <summary>
            Gibt den Namen des Laufwerks zurück.
            Muss jedes Laufwerk beherrschen.
            </summary>
            <param name="device">Spti Wrapper</param>
            <param name="result">Zurückgegebener Laufwerksname</param>
            <returns>Status des Befehls</returns>
        </member>
        <member name="M:AudioCDReaderLib.Commands.LoadUnload(AudioCDReaderLib.Spti,AudioCDReaderLib.Commands.LoUnloadAction,System.Boolean)">
            <summary>
            Läd oder entläd das Medium
            </summary>
            <param name="device">Spti Wrapper</param>
            <param name="action">Auszuführende Aktion</param>
            <param name="immed">Nicht auf Ende der Aktion warten</param>
            <returns>Status des Befehls</returns>
        </member>
        <member name="M:AudioCDReaderLib.Commands.StartStopUnit(AudioCDReaderLib.Spti,AudioCDReaderLib.Commands.PowerCondition,AudioCDReaderLib.Commands.LoUnloadAction,System.Boolean)">
            <summary>
            Setzt den Strommodus des Laufwerks
            oder läd oder wirft das Medium aus
            </summary>
            <param name="device">Spti Wrapper</param>
            <param name="condition">Strommodus</param>
            <param name="action">Auszuführende Aktion</param>
            <param name="immed">Nicht auf Ende der Aktion warten</param>
            <returns>Status des Befehls</returns>
        </member>
        <member name="M:AudioCDReaderLib.Commands.PreventAllowMediumRemoval(AudioCDReaderLib.Spti,AudioCDReaderLib.Commands.PreventRemovalAction)">
            <summary>
            Sperrt und gibt Medium frei
            </summary>
            <param name="device">Spti Wrapper</param>
            <param name="lock">Aktion</param>
            <returns>Status des Befehls</returns>
        </member>
        <member name="M:AudioCDReaderLib.Commands.ReadTOC(AudioCDReaderLib.Spti,AudioCDReaderLib.Commands.TimeFormat,AudioCDReaderLib.Commands.TocFormat,System.Byte,System.Byte[]@)">
            <summary>
            Liest (formatierte/komplette) TOC, PMA, ATIP oder CD-Text
            </summary>
            <param name="Device">Spti Wrapper</param>
            <param name="Time">Zeitformat</param>
            <param name="TocFmt">TOC Format</param>
            <param name="TrackSessionNr">Track/Sessionnummer</param>
            <param name="Data">Vom Laufwerk zurückgegebene Daten</param>
            <returns>Status des Befehls</returns>
        </member>
        <member name="M:AudioCDReaderLib.Commands.ReadTrackInformation(AudioCDReaderLib.Spti,System.Byte,AudioCDReaderLib.Commands.ScsiTrackInformation@)">
            <summary>
            Liest Track Infos aus
            </summary>
            <param name="Device">Spti Wrapper</param>
            <param name="track">Nummer des Tracks</param>
            <param name="info">Vom Laufwerk zurückgegebene Daten</param>
            <returns>Status des Befehls</returns>
        </member>
        <member name="M:AudioCDReaderLib.Commands.SetCDSpeed(AudioCDReaderLib.Spti,AudioCDReaderLib.Commands.RotationControl,System.Int16,System.Int16)">
            <summary>
            Setzt die Lese- und Schreibgeschwindigkeit
            </summary>
            <param name="Device">Spti Wrapper</param>
            <param name="rotation">Rotationsmodus</param>
            <param name="ReadSpeed">Lesegeschwindigkeit (FFFFh = Maximum)</param>
            <param name="WriteSpeed">Schreibgeschwindigkeit (FFFFh = Maximum)</param>
            <returns>Status des Befehls</returns>
        </member>
        <member name="M:AudioCDReaderLib.Commands.ReadCD(AudioCDReaderLib.Spti,System.Int32,System.Int32,AudioCDReaderLib.Commands.ReadCDFlags,System.IntPtr,System.Int32)">
            <summary>
            Liest Sektoren von einer CD
            </summary>
            <param name="Device">Spti Wrapper</param>
            <param name="StartLBA">Startsektor</param>
            <param name="Sectors">Anzahl an Sektoren</param>
            <param name="Flags">Leseflags</param>
            <param name="pBuffer">Lesebuffer</param>
            <param name="BufferLen">Bufferlänge</param>
            <returns>Status des Befehls</returns>
        </member>
        <member name="M:AudioCDReaderLib.Commands.TocGetFullOLD(AudioCDReaderLib.Spti,System.Byte[])">
            <summary>
            Extrahiert Trackinfos aus einem
            von ReadTOC für Format "FullTOC"
            zurückgegebenen Byte Array
            </summary>
            <param name="Device">Spti Wrapper</param>
            <param name="data">TOC als Byte Array</param>
            <returns>Status des Befehls</returns>
        </member>
        <member name="M:AudioCDReaderLib.Commands.TocGetFormated(AudioCDReaderLib.Spti,System.Byte[],AudioCDReaderLib.Commands.TimeFormat)">
            <summary>
            Extrahiert Trackinfos aus einem
            von ReadTOC für Format "FormatedTOC"
            zurückgegebenen Byte Array
            </summary>
            <param name="Device">Spti Wrapper</param>
            <param name="data">TOC als Byte Array</param>
            <param name="time">In ReadTOC verwendetes Zeitformat</param>
            <returns>Status des Befehls</returns>
        </member>
        <member name="M:AudioCDReaderLib.Commands.AddCDB8(System.Byte[]@,System.Int32,System.Byte)">
            <summary>
            Or Verknüpfung zweier Bytes in ein Byte Array speichern
            </summary>
            <param name="cdb">Byte Array</param>
            <param name="index">Index</param>
            <param name="value">Zu verknüpfender Wert</param>
        </member>
        <member name="M:AudioCDReaderLib.Commands.PutCDB8(System.Byte[]@,System.Int32,System.Byte)">
            <summary>
            8 Bit Wert in Byte Array speichern
            </summary>
            <param name="cdb">Byte Array</param>
            <param name="index">Index</param>
            <param name="value">Wert</param>
        </member>
        <member name="M:AudioCDReaderLib.Commands.PutCDB16(System.Byte[]@,System.Int32,System.Int16)">
            <summary>
            16 Bit Wert in Byte Array speichern
            </summary>
            <param name="cdb">Byte Array</param>
            <param name="index">Index</param>
            <param name="value">Wert</param>
        </member>
        <member name="M:AudioCDReaderLib.Commands.PutCDB24(System.Byte[]@,System.Int32,System.Int32)">
            <summary>
            24 Bit Wert in Byte Array speichern
            </summary>
            <param name="cdb">Byte Array</param>
            <param name="index">Index</param>
            <param name="value">Wert</param>
        </member>
        <member name="M:AudioCDReaderLib.Commands.PutCDB32(System.Byte[]@,System.Int32,System.Int32)">
            <summary>
            32 Bit Wert in Byte Array speichern
            </summary>
            <param name="cdb">Byte Array</param>
            <param name="index">Index</param>
            <param name="value">Wert</param>
        </member>
        <member name="M:AudioCDReaderLib.Commands.ReverseI16(System.Int16)">
            <summary>
            Die Bytes eines 16 Bit Werts tauschen
            (AABBh wird zu BBAAh)
            </summary>
            <param name="short_in">16 Bit Wert</param>
            <returns>16 Bit Wert</returns>
        </member>
        <member name="M:AudioCDReaderLib.Commands.ReverseI32(System.Int32)">
            <summary>
            Die Bytes eines 32 Bit Wertes tauschen
            (AABBCCDDh wird zu DDCCBBAAh)
            </summary>
            <param name="int_in">32 Bit Wert</param>
            <returns>32 Bit Wert</returns>
        </member>
        <member name="T:AudioCDReaderLib.Msf">
            <summary>
            Datentyp für Minuten, Sekunden und Frames
            </summary>
        </member>
        <member name="F:AudioCDReaderLib.Msf.SamplesPerFrame">
            <summary>
            Audio Samples, die in 1 CD Frame passen
            </summary>
            <remarks>Ein Audio Track hat 16 Bit Stereo Samples bei 44.1 kHz</remarks>
        </member>
        <member name="F:AudioCDReaderLib.Msf.FramesPerSecond">
            <summary>
            Anzahl an Frames, die in 1 Sekunde passen
            </summary>
        </member>
        <member name="F:AudioCDReaderLib.Msf.SecondsPerMinute">
            <summary>
            Sekunden pro Minute
            </summary>
        </member>
        <member name="F:AudioCDReaderLib.Msf.m_m">
            <summary>
            Minuten
            </summary>
        </member>
        <member name="F:AudioCDReaderLib.Msf.m_s">
            <summary>
            Sekunden
            </summary>
        </member>
        <member name="F:AudioCDReaderLib.Msf.m_f">
            <summary>
            Frames
            </summary>
        </member>
        <member name="M:AudioCDReaderLib.Msf.#ctor">
            <summary>
            Initialisiert die MSF Klasse
            </summary>
        </member>
        <member name="M:AudioCDReaderLib.Msf.#ctor(System.Int32)">
            <summary>
            Initialisiert die MSF Klasse mit der
            übergebenen Anzahl an Frames
            </summary>
            <param name="lba">Frames, die in das MSF Format
            umgerechnet werden sollen</param>
        </member>
        <member name="M:AudioCDReaderLib.Msf.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initialisiert die MSF Klasse mit
            dem übergebenen Zeitwert
            </summary>
            <param name="mins">Minuten (0-255)</param>
            <param name="secs">Sekunden (0-255)</param>
            <param name="frms">Frames (0-255)</param>
        </member>
        <member name="M:AudioCDReaderLib.Msf.SetLBA(AudioCDReaderLib.Msf,System.Int32)">
            <summary>
            LBA im MSF umrechnen und einer MSF Klasse zuweisen
            </summary>
            <param name="clsMSF">MSF Klasse</param>
            <param name="lba">Anzahl Frames</param>
            <remarks>clsMSF darf nicht Null sein</remarks>
        </member>
        <member name="P:AudioCDReaderLib.Msf.M">
            <summary>
            Gibt Minuten zurück oder setzt sie
            </summary>
            <returns>Wert von 0-255 in Minuten</returns>
        </member>
        <member name="P:AudioCDReaderLib.Msf.S">
            <summary>
            Gibt Sekunden zurück oder setzt sie
            </summary>
            <returns>Wert von 0-255 in Sekunden</returns>
        </member>
        <member name="P:AudioCDReaderLib.Msf.F">
            <summary>
            Gibt Frames zurück oder setzt sie
            </summary>
            <returns>Wert von 0-255 in Frames</returns>
            <remarks>1 Frame = 1 Sektor</remarks>
        </member>
        <member name="M:AudioCDReaderLib.Msf.Parse(System.String)">
            <summary>
            Wandelt einen String in MSF um
            </summary>
            <param name="strMSF">Zeitwert als String</param>
            <returns>extrahierter Zeitwert auf String</returns>
            <remarks>Geeignet als Format ist "mm:ss:ff" oder
            auch "mm:ss:ff"</remarks>
        </member>
        <member name="M:AudioCDReaderLib.Msf.FromMSF(System.Byte,System.Byte,System.Byte)">
            <summary>
            MSF Klasse aus Minuten, Sekunden, Frames
            </summary>
            <param name="mins">Minuten (0-255)</param>
            <param name="secs">Sekunden (0-255)</param>
            <param name="frms">Frames (0-255)</param>
            <returns>MSF Klasse</returns>
        </member>
        <member name="M:AudioCDReaderLib.Msf.FromLBA(System.Int32)">
            <summary>
            MSF aus Frames
            </summary>
            <param name="lba">Anzahl an Frames</param>
            <returns>MSF Klasse</returns>
        </member>
        <member name="M:AudioCDReaderLib.Msf.ToLBA">
            <summary>
            MSF nach Frames
            </summary>
            <returns>Anzahl an Frames (Sektoren/Blöcke)</returns>
        </member>
        <member name="M:AudioCDReaderLib.Msf.ToString">
            <summary>
            Formatiert Zeitwert in "mm:ss.ff"
            </summary>
            <returns>MSF als String</returns>
        </member>
        <member name="M:AudioCDReaderLib.Msf.Equals(System.Object)">
            <summary>
            Prüft, ob 2 MSF Werte gleich sind
            </summary>
            <param name="obj">MSF Klasse</param>
            <returns>True, wenn die Objekte den gleichen Wert haben</returns>
        </member>
        <member name="M:AudioCDReaderLib.Msf.op_Addition(System.String,AudioCDReaderLib.Msf)">
            <summary>
            String Verknüpfung
            </summary>
            <param name="strValue">String</param>
            <param name="msf1">MSF Klasse</param>
            <returns>Verknüpfter String</returns>
        </member>
        <member name="M:AudioCDReaderLib.Msf.op_Addition(AudioCDReaderLib.Msf,System.String)">
            <summary>
            String Verknüpfung
            </summary>
            <param name="msf1">MSF Klasse</param>
            <param name="strValue">String</param>
            <returns>Verknüpfter String</returns>
        </member>
        <member name="M:AudioCDReaderLib.Msf.op_Implicit(AudioCDReaderLib.Msf)~System.Int32">
            <summary>
            Konvertiert MSF in Frames
            </summary>
            <param name="msf1">MSF Klasse</param>
            <returns>Anzahl an Frames</returns>
        </member>
        <member name="M:AudioCDReaderLib.Msf.op_Implicit(AudioCDReaderLib.Msf)~System.String">
            <summary>
            Formatiert MSF in einem String
            </summary>
            <param name="msf1">MSF Klasse</param>
            <returns>String Repräsentation der MSF im Format "mm:ss.ff"</returns>
        </member>
        <member name="M:AudioCDReaderLib.Msf.op_Implicit(System.Int32)~AudioCDReaderLib.Msf">
            <summary>
            Konvertiert Frames in MSF
            </summary>
            <param name="value">Anzahl an Frames</param>
            <returns>MSF Klasse</returns>
        </member>
        <member name="M:AudioCDReaderLib.Msf.op_Equality(AudioCDReaderLib.Msf,AudioCDReaderLib.Msf)">
            <summary>
            Vergleicht 2 MSF Werte miteinander
            </summary>
            <param name="msf1">MSF Wert 1</param>
            <param name="msf2">MSF Wert 2</param>
            <returns>True für Gleichheit</returns>
        </member>
        <member name="M:AudioCDReaderLib.Msf.op_Inequality(AudioCDReaderLib.Msf,AudioCDReaderLib.Msf)">
            <summary>
            Vergleicht 2 MSF Werte miteinander
            </summary>
            <param name="msf1">MSF Wert 1</param>
            <param name="msf2">MSF Wert 2</param>
            <returns>True für ungleiche Werte</returns>
        </member>
        <member name="M:AudioCDReaderLib.Msf.op_LessThan(AudioCDReaderLib.Msf,AudioCDReaderLib.Msf)">
            <summary>
            Vergleicht 2 MSF Werte miteinander
            </summary>
            <param name="msf1">MSF Wert 1</param>
            <param name="msf2">MSF Wert 2</param>
            <returns>True für MSF Wert 1 kleiner als MSF Wert 2</returns>
        </member>
        <member name="M:AudioCDReaderLib.Msf.op_GreaterThan(AudioCDReaderLib.Msf,AudioCDReaderLib.Msf)">
            <summary>
            Vergleicht 2 MSF Werte miteinander
            </summary>
            <param name="msf1">MSF Wert 1</param>
            <param name="msf2">MSF Wert 2</param>
            <returns>True für MSF Wert 1 größer als MSF Wert 2</returns>
        </member>
        <member name="M:AudioCDReaderLib.Msf.op_LessThanOrEqual(AudioCDReaderLib.Msf,AudioCDReaderLib.Msf)">
            <summary>
            Vergleicht 2 MSF Werte miteinander
            </summary>
            <param name="msf1">MSF Wert 1</param>
            <param name="msf2">MSF Wert 2</param>
            <returns>True für MSF Wert 1 kleiner gleich MSF Wert 2</returns>
        </member>
        <member name="M:AudioCDReaderLib.Msf.op_GreaterThanOrEqual(AudioCDReaderLib.Msf,AudioCDReaderLib.Msf)">
            <summary>
            Vergleicht 2 MSF Werte miteinander
            </summary>
            <param name="msf1">MSF Wert 1</param>
            <param name="msf2">MSF Wert 2</param>
            <returns>True für MSF Wert 1 größer gleich MSF Wert 2</returns>
        </member>
        <member name="M:AudioCDReaderLib.Msf.op_Addition(AudioCDReaderLib.Msf,System.Int32)">
            <summary>
            Addiert einen MSF Wert mit Frames
            </summary>
            <param name="msf1">MSF Wert</param>
            <param name="lba">Anzahl an Frames</param>
            <returns>Summand als MSF</returns>
        </member>
        <member name="M:AudioCDReaderLib.Msf.op_Addition(System.Int32,AudioCDReaderLib.Msf)">
            <summary>
            Addiert einen MSF Wert mit Frames
            </summary>
            <param name="lba">Anzahl an Frames</param>
            <param name="msf2">MSF Wert</param>
            <returns>Summand als MSF</returns>
        </member>
        <member name="M:AudioCDReaderLib.Msf.op_Addition(AudioCDReaderLib.Msf,AudioCDReaderLib.Msf)">
            <summary>
            Addiert 2 MSF Werte miteinander
            </summary>
            <param name="msf1">MSF Wert 1</param>
            <param name="msf2">MSF Wert 2</param>
            <returns>Summand als MSF</returns>
        </member>
        <member name="M:AudioCDReaderLib.Msf.op_Subtraction(AudioCDReaderLib.Msf,System.Int32)">
            <summary>
            Subtrahiert Frames von einem MSF Wert
            </summary>
            <param name="msf1">MSF Wert</param>
            <param name="lba">Anzahl an Frames</param>
            <returns>Subtrahend als MSF</returns>
        </member>
        <member name="M:AudioCDReaderLib.Msf.op_Subtraction(System.Int32,AudioCDReaderLib.Msf)">
            <summary>
            Subtrahiert MSF von Frames
            </summary>
            <param name="lba">Anahl an Frames</param>
            <param name="msf2">MSF Wert</param>
            <returns>Subtrahend als MSF</returns>
        </member>
        <member name="M:AudioCDReaderLib.Msf.op_Subtraction(AudioCDReaderLib.Msf,AudioCDReaderLib.Msf)">
            <summary>
            Subtrahiert einen MSF Wert vom anderen
            </summary>
            <param name="msf1">MSF Wert 1</param>
            <param name="msf2">MSF Wert 2</param>
            <returns>Subtrahend als MSF</returns>
        </member>
        <member name="F:AudioCDReaderLib.Msf.disposedValue">
            <summary>
            Gibt an, ob Dispose schon aufgerufen worden ist
            </summary>
        </member>
        <member name="M:AudioCDReaderLib.Msf.Dispose(System.Boolean)">
            <summary>
            Befreit alle Resourcen der Klasse
            </summary>
            <param name="disposing">Resourcen befreien</param>
        </member>
        <member name="M:AudioCDReaderLib.Msf.Dispose">
            <summary>
            Befreit alle Resourcen der Klasse
            </summary>
        </member>
        <member name="T:AudioCDReaderLib.Spti">
            <summary>
            Kommunikationsbrücke zwischen Programm
            und SCSI/ATAPI/USB/Firwire Laufwerken
            </summary>
            <remarks>Erst ab Win NT lauffähig</remarks>
        </member>
        <member name="T:AudioCDReaderLib.Spti.IoScsiCapabilities">
            <summary>
            Für IOCTL_SCSI_GET_CAPABILITIES
            </summary>
        </member>
        <member name="T:AudioCDReaderLib.Spti.ScsiAddress">
            <summary>
            Für IOCTL_SCSI_GET_ADDRESS
            </summary>
        </member>
        <member name="T:AudioCDReaderLib.Spti.ScsiPassThroughDirect">
            <summary>
            Für IOCTL_SCSI_PASS_THROUGH_DIRECT
            </summary>
        </member>
        <member name="T:AudioCDReaderLib.Spti.SenseInfoData">
            <summary>
            Sense Info (quasi vom Laufwerk geworfene Exception)
            </summary>
        </member>
        <member name="T:AudioCDReaderLib.Spti.ScsiPassThroughDirectWSI">
            <summary>
            Für IOCTL_SCSI_PASS_THROUGH,
            aber mit Sense Info Buffer
            </summary>
        </member>
        <member name="T:AudioCDReaderLib.Spti.DriveHandle">
            <summary>
            Interne Verwaltung von Laufwerkshandles
            </summary>
        </member>
        <member name="P:AudioCDReaderLib.Spti.DeviceCount">
            <summary>
            Anzahl an gefundenen Laufwerken
            </summary>
        </member>
        <member name="M:AudioCDReaderLib.Spti.DeviceName(System.Int32)">
            <summary>
            Name eines Laufwerks (vom Setup API)
            </summary>
        </member>
        <member name="M:AudioCDReaderLib.Spti.DeviceAddress(System.Int32)">
            <summary>
            Bus Adresse eines Laufwerks
            </summary>
        </member>
        <member name="M:AudioCDReaderLib.Spti.DeviceMaximumTransferLength(System.Int32)">
            <summary>
            Größte pro Befehl zu transferierende Datenmenge
            für ein Laufwerk
            </summary>
        </member>
        <member name="P:AudioCDReaderLib.Spti.LastSenseKey">
            <summary>
            Sense Key aus Sense Info des letzten Befehls
            </summary>
        </member>
        <member name="P:AudioCDReaderLib.Spti.LastAddSenseCode">
            <summary>
            Additional Sense Code aus Sense Info des letzten Befehls
            </summary>
        </member>
        <member name="P:AudioCDReaderLib.Spti.LastAdSenseQualifier">
            <summary>
            Additional Sense Qualifier aus Sense Info des letzten Befehls
            </summary>
        </member>
        <member name="P:AudioCDReaderLib.Spti.SelectedDevice">
            <summary>
            Index des ausgewählten Laufwerks
            </summary>
        </member>
        <member name="M:AudioCDReaderLib.Spti.SelectDevice(System.Int32)">
            <summary>
            Laufwerk auswählen (nötig für ExecuteCommand)
            </summary>
        </member>
        <member name="M:AudioCDReaderLib.Spti.ExecuteCommand(System.Byte[],System.Byte,AudioCDReaderLib.Spti.DataDirection,System.IntPtr,System.Int32,System.UInt32)">
            <summary>
            Befehl an ausgewähltes Laufwerk senden
            </summary>
            <param name="cdb">Command Descriptor Block (maximal 16 Bytes)</param>
            <param name="cdblen">CDB Größe in Bytes</param>
            <param name="direction">Datenrichtung</param>
            <param name="pBuffer">Pointer auf Datenbuffer</param>
            <param name="bufferlen">Datenbufferlänge</param>
            <param name="timeout">Timeout in Sekunden</param>
            <returns>Status des Befehls</returns>
        </member>
        <member name="M:AudioCDReaderLib.Spti.CloseDrives">
            <summary>
            Handles aller Laufwerke schließen
            </summary>
        </member>
        <member name="M:AudioCDReaderLib.Spti.FindDrives">
            <summary>
            angeschlossene CD/DVD-ROM Laufwerke finden
            per Setup API
            </summary>
            <returns>Anzahl gefundener Laufwerke</returns>
        </member>
        <member name="M:AudioCDReaderLib.Spti.GetDevName(System.Int32,System.Int32)">
            <summary>
            Laufwerksname über Setup API herausfinden
            </summary>
        </member>
        <member name="M:AudioCDReaderLib.Spti.GetDevPath(System.Int32,System.Int32,System.Guid)">
            <summary>
            Laufwerkspfad über Setup API herausfinden
            </summary>
        </member>
        <member name="M:AudioCDReaderLib.Spti.GetDevBusPosition(System.Int32)">
            <summary>
            Bus Position eines Laufwerks ermitteln
            </summary>
        </member>
        <member name="M:AudioCDReaderLib.Spti.GetDevCapabilities(System.Int32)">
            <summary>
            Fähigkeiten des Adapters, an dem ein Laufwerk hängt
            </summary>
        </member>
        <member name="M:AudioCDReaderLib.Spti.CtlCode(System.Int32,System.Int32,AudioCDReaderLib.Spti.Method,AudioCDReaderLib.Spti.FileAccess)">
            <summary>
            Control Code zusammenshiften
            </summary>
        </member>
        <member name="M:AudioConverterLib.cACM.PtrToStructure``1(System.IntPtr)">
            <summary>
            Pointer to Structure
            </summary>
        </member>
        <member name="P:AudioConverterLib.cACMBridg.BufferSize">
            <summary>
            The buffer size of the conversion process. The default size is 1600 and the minimum size is 100.
            </summary>
            
        </member>
        <member name="M:CSFreeDB.Core.CDDrive.ReadSector(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Read Audio Sectors
            </summary>
            <param name="sector">The sector where to start to read</param>
            <param name="Buffer">The length must be at least CB_CDDASECTOR*Sectors bytes</param>
            <param name="NumSectors">Number of sectors to read</param>
            <returns>True on success</returns>
        </member>
        <member name="M:CSFreeDB.Core.CDDrive.LockCD">
            <summary>
            Lock the CD drive 
            </summary>
            <returns>True on success</returns>
        </member>
        <member name="M:CSFreeDB.Core.CDDrive.UnLockCD">
            <summary>
            Unlock CD drive
            </summary>
            <returns>True on success</returns>
        </member>
        <member name="M:CSFreeDB.Core.CDDrive.LoadCD">
            <summary>
            Close the CD drive door
            </summary>
            <returns>True on success</returns>
        </member>
        <member name="M:CSFreeDB.Core.CDDrive.EjectCD">
            <summary>
            Open the CD drive door
            </summary>
            <returns>True on success</returns>
        </member>
        <member name="M:CSFreeDB.Core.CDDrive.IsCDReady">
            <summary>
            Check if there is CD in the drive
            </summary>
            <returns>True on success</returns>
        </member>
        <member name="M:CSFreeDB.Core.CDDrive.Refresh">
            <summary>
            If there is a CD in the drive read its TOC
            </summary>
            <returns>True on success</returns>
        </member>
        <member name="M:CSFreeDB.Core.CDDrive.GetNumTracks">
            <summary>
            Return the number of tracks on the CD
            </summary>
            <returns>-1 on error</returns>
        </member>
        <member name="M:CSFreeDB.Core.CDDrive.GetNumAudioTracks">
            <summary>
            Return the number of audio tracks on the CD
            </summary>
            <returns>-1 on error</returns>
        </member>
        <member name="M:CSFreeDB.Core.CDDrive.ReadTrack(System.Int32,System.Byte[],System.UInt32@,System.UInt32,System.UInt32,CdReadProgressEventHandler)">
            <summary>
            Read the digital data of the track
            </summary>
            <param name="track">Track to read</param>
            <param name="Data">Buffer that will receive the data</param>
            <param name="DataSize">On return the size needed to read the track</param>
            <param name="StartSecond">First second of the track to read, 0 means to start at beginning of the track</param>
            <param name="Seconds2Read">Number of seconds to read, 0 means to read until the end of the track</param>
            <param name="OnProgress">Delegate to indicate the reading progress</param>
            <returns>Negative value means an error. On success returns the number of bytes read</returns>
        </member>
        <member name="M:CSFreeDB.Core.CDDrive.ReadTrack(System.Int32,System.Byte[],System.UInt32@,CdReadProgressEventHandler)">
            <summary>
            Read the digital data of the track
            </summary>
            <param name="track">Track to read</param>
            <param name="Data">Buffer that will receive the data</param>
            <param name="DataSize">On return the size needed to read the track</param>
            <param name="OnProgress">Delegate to indicate the reading progress</param>
            <returns>Negative value means an error. On success returns the number of bytes read</returns>
        </member>
        <member name="M:CSFreeDB.Core.CDDrive.ReadTrack(System.Int32,CdDataReadEventHandler,System.UInt32,System.UInt32,CdReadProgressEventHandler)">
            <summary>
            Read the digital data of the track
            </summary>
            <param name="track">Track to read</param>
            <param name="OnDataRead">Call each time data is read</param>
            <param name="StartSecond">First second of the track to read, 0 means to start at beginning of the track</param>
            <param name="Seconds2Read">Number of seconds to read, 0 means to read until the end of the track</param>
            <param name="OnProgress">Delegate to indicate the reading progress</param>
            <returns>Negative value means an error. On success returns the number of bytes read</returns>
        </member>
        <member name="M:CSFreeDB.Core.CDDrive.ReadTrack(System.Int32,CdDataReadEventHandler,CdReadProgressEventHandler)">
            <summary>
            Read the digital data of the track
            </summary>
            <param name="track">Track to read</param>
            <param name="OnDataRead">Call each time data is read</param>
            <param name="OnProgress">Delegate to indicate the reading progress</param>
            <returns>Negative value means an error. On success returns the number of bytes read</returns>
        </member>
        <member name="M:CSFreeDB.Core.CDDrive.TrackSize(System.Int32)">
            <summary>
            Get track size
            </summary>
            <param name="track">Track</param>
            <returns>Size in bytes of track data</returns>
        </member>
        <member name="M:CSFreeDB.Core.CDDrive.TrackLength(System.Int32)">
            <summary>
            Get track size
            </summary>
            <param name="track">Track</param>
            <returns>Size in bytes of track data</returns>
        </member>
        <member name="M:CSFreeDB.Core.CDDrive.GetCDDBDiskID">
            <summary>
            Retrieve a CDDB DiskID 
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSFreeDB.Core.CDDrive.GetCDDBQuery">
            <summary>
            Retrieve the data required to perform a CDDB Query
            </summary>
            <returns></returns>
        </member>
        <member name="T:CSFreeDB.Core.PercentArgs">
            <summary>
            The variant of the progress event.
            </summary>
        </member>
        <member name="T:CSFreeDB.Core.MessageArgs">
            <summary>
            The variant of the error event.
            </summary>
        </member>
        <member name="T:CSFreeDB.Core.FreedbHelper">
            <summary>
            Summary description for FreedbHelper.
            </summary>
        </member>
        <member name="P:CSFreeDB.Core.FreedbHelper.Version">
            <summary>
            Property Version (string)
            </summary>
        </member>
        <member name="P:CSFreeDB.Core.FreedbHelper.MainSite">
            <summary>
            Property MainSite(string)
            </summary>
        </member>
        <member name="P:CSFreeDB.Core.FreedbHelper.ClientName">
            <summary>
            Property ClientName (string)
            </summary>
        </member>
        <member name="P:CSFreeDB.Core.FreedbHelper.Hostname">
            <summary>
            Property Hostname (string)
            </summary>
        </member>
        <member name="P:CSFreeDB.Core.FreedbHelper.UserName">
            <summary>
            Property UserName (string)
            </summary>
        </member>
        <member name="P:CSFreeDB.Core.FreedbHelper.ProtocolLevel">
            <summary>
            Property ProtocolLevel (string)
            </summary>
        </member>
        <member name="P:CSFreeDB.Core.FreedbHelper.CurrentSite">
            <summary>
            Property CurrentSite (Site)
            </summary>
        </member>
        <member name="M:CSFreeDB.Core.FreedbHelper.GetSites(SiteCollection@)">
            <summary>
            Retrieve all Freedb servers from the main server site
            </summary>
            <param name="sites">SiteCollection that is populated with the site information</param>
            <returns>Response Code</returns>
        </member>
        <member name="M:CSFreeDB.Core.FreedbHelper.GetSites(System.String,SiteCollection@)">
            <summary>
            Get the Freedb sites
            </summary>
            <param name="protocol"></param>
            <param name="sites">SiteCollection that is populated with the site information</param>
            <returns>Response Code</returns>
            
        </member>
        <member name="M:CSFreeDB.Core.FreedbHelper.Read(QueryResult,CDEntry@)">
            <summary>
            Read Entry from the database. 
            </summary>
            <param name="qr">A QueryResult object that is created by performing a query</param>
            <param name="cdEntry">out parameter - CDEntry object</param>
            <returns></returns>
        </member>
        <member name="M:CSFreeDB.Core.FreedbHelper.Query(System.String,QueryResult@,QueryResultCollection@)">
            <summary>
            Query the freedb server to see if there is information on this cd
            </summary>
            <param name="querystring"></param>
            <param name="queryResult"></param>
            <param name="queryResultsColl"></param>
            <returns></returns>
        </member>
        <member name="M:CSFreeDB.Core.FreedbHelper.GetCategories(System.Collections.Specialized.StringCollection@)">
            <summary>
            Retrieve the categories
            </summary>
            <param name="strings"></param>
            <returns></returns>
        </member>
        <member name="M:CSFreeDB.Core.FreedbHelper.Call(System.String)">
            <summary>
            Call the Freedb server using the specified command and the current site
            If the current site is null use the default server
            </summary>
            <param name="command">The command to be exectued</param>
            <returns>StringCollection</returns>
        </member>
        <member name="M:CSFreeDB.Core.FreedbHelper.Call(System.String,System.String)">
            <summary>
            Call the Freedb server using the specified command and the specified url
            The command should not include the cmd= and hello and proto parameters.
            They will be added automatically
            </summary>
            <param name="command">The command to be exectued</param>
            <param name="url">The Freedb server to use</param>
            <returns>StringCollection</returns>
        </member>
        <member name="M:CSFreeDB.Core.FreedbHelper.BuildCommand(System.String)">
            <summary>
            Given a specific command add on the hello and proto which are requied for an http call
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:CSFreeDB.Core.FreedbHelper.Hello">
            <summary>
            Build the hello part of the command 
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSFreeDB.Core.FreedbHelper.Proto">
            <summary>
            Build the Proto part of the command
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSFreeDB.Core.FreedbHelper.GetCode(System.String)">
            <summary>
            given the first line of a result set return the CDDB code
            </summary>
            <param name="firstLine"></param>
            <returns></returns>
        </member>
        <member name="M:CSFreeDB.Core.FreedbHelper.SetDefaultSiteAddress(System.String)">
            <summary>
            If a different default site address is preferred over "freedb.freedb.org"
            set it here
            NOTE: Only set the ip address
            </summary>
            <param name="ipAddress"></param>
        </member>
        <member name="T:CSFreeDB.Core.Win32Functions.Win32">
            <summary>
            Win32 API functions
            </summary>
        </member>
        <member name="M:CSFreeDB.Core.Win32Functions.CreateFile(System.String,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            Win32 CreateFile function, look for complete information at Platform SDK
            </summary>
            <param name="FileName">In order to read CD data FileName must be "\\.\\D:" where D is the CDROM drive letter</param>
            <param name="DesiredAccess">Must be GENERIC_READ for CDROMs others access flags are not important in this case</param>
            <param name="ShareMode">O means exlusive access, FILE_SHARE_READ allow open the CDROM</param>
            <param name="lpSecurityAttributes">See Platform SDK documentation for details. NULL pointer could be enough</param>
            <param name="CreationDisposition">Must be OPEN_EXISTING for CDROM drives</param>
            <param name="dwFlagsAndAttributes">0 in fine for this case</param>
            <param name="hTemplateFile">NULL handle in this case</param>
            <returns>INVALID_HANDLE_VALUE on error or the handle to file if success</returns>
        </member>
        <member name="M:CSFreeDB.Core.Win32Functions.CloseHandle(System.IntPtr)">
            <summary>
            The CloseHandle function closes an open object handle.
            </summary>
            <param name="hObject">Handle to an open object.</param>
            <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:CSFreeDB.Core.Win32Functions.DeviceIoControl(System.IntPtr,System.UInt32,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32,System.UInt32@,System.IntPtr)">
            <summary>
            Most general form of DeviceIoControl Win32 function
            </summary>
            <param name="hDevice">Handle of device opened with CreateFile, <see cref="!:RipperLib.Win32Functions.CreateFile"/></param>
            <param name="IoControlCode">Code of DeviceIoControl operation</param>
            <param name="lpInBuffer">Pointer to a buffer that contains the data required to perform the operation.</param>
            <param name="InBufferSize">Size of the buffer pointed to by lpInBuffer, in bytes.</param>
            <param name="lpOutBuffer">Pointer to a buffer that receives the operation's output data.</param>
            <param name="nOutBufferSize">Size of the buffer pointed to by lpOutBuffer, in bytes.</param>
            <param name="lpBytesReturned">Receives the size, in bytes, of the data stored into the buffer pointed to by lpOutBuffer. </param>
            <param name="lpOverlapped">Pointer to an OVERLAPPED structure. Discarded for this case</param>
            <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</returns>
        </member>
        <member name="F:CSFreeDB.Core.Win32Functions.TRACK_DATA.Address_0">
            <summary>
            Don't use array to avoid array creation
            </summary>
        </member>
        <member name="M:CSFreeDB.Core.Win32Functions.DeviceIoControl(System.IntPtr,System.UInt32,System.IntPtr,System.UInt32,CSFreeDB.Core.Win32Functions.CDROM_TOC,System.UInt32,System.UInt32@,System.IntPtr)">
            <summary>
            Overload version of DeviceIOControl to read the TOC (Table of contents)
            </summary>
            <param name="hDevice">Handle of device opened with CreateFile, <see cref="!:RipperLib.Win32Functions.CreateFile"/></param>
            <param name="IoControlCode">Must be IOCTL_CDROM_READ_TOC for this overload version</param>
            <param name="InBuffer">Must be <code>IntPtr.Zero</code> for this overload version </param>
            <param name="InBufferSize">Must be 0 for this overload version</param>
            <param name="OutTOC">TOC object that receive the CDROM TOC</param>
            <param name="OutBufferSize">Must be <code>(UInt32)Marshal.SizeOf(CDROM_TOC)</code> for this overload version</param>
            <param name="BytesReturned">Receives the size, in bytes, of the data stored into OutTOC</param>
            <param name="Overlapped">Pointer to an OVERLAPPED structure. Discarded for this case</param>
            <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</returns>
        </member>
        <member name="M:CSFreeDB.Core.Win32Functions.DeviceIoControl(System.IntPtr,System.UInt32,CSFreeDB.Core.Win32Functions.PREVENT_MEDIA_REMOVAL,System.UInt32,System.IntPtr,System.UInt32,System.UInt32@,System.IntPtr)">
            <summary>
            Overload version of DeviceIOControl to lock/unlock the CD
            </summary>
            <param name="hDevice">Handle of device opened with CreateFile, <see cref="!:RipperLib.Win32Functions.CreateFile"/></param>
            <param name="IoControlCode">Must be IOCTL_STORAGE_MEDIA_REMOVAL for this overload version</param>
            <param name="InMediaRemoval">Set the lock/unlock state</param>
            <param name="InBufferSize">Must be <code>(UInt32)Marshal.SizeOf(PREVENT_MEDIA_REMOVAL)</code> for this overload version</param>
            <param name="OutBuffer">Must be <code>IntPtr.Zero</code> for this overload version </param>
            <param name="OutBufferSize">Must be 0 for this overload version</param>
            <param name="BytesReturned">A "dummy" varible in this case</param>
            <param name="Overlapped">Pointer to an OVERLAPPED structure. Discarded for this case</param>
            <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CSFreeDB.Core.Win32Functions.DeviceIoControl(System.IntPtr,System.UInt32,CSFreeDB.Core.Win32Functions.RAW_READ_INFO,System.UInt32,System.Byte[],System.UInt32,System.UInt32@,System.IntPtr)" -->
        <member name="T:CDEntry">
            <summary>
            Summary description for CDEntry.
            </summary>
        </member>
        <member name="P:CDEntry.Discid">
            <summary>
            Property Discid (string)
            </summary>
        </member>
        <member name="P:CDEntry.Artist">
            <summary>
            Property Artist (string)
            </summary>
        </member>
        <member name="P:CDEntry.Title">
            <summary>
            Property Title (string)
            </summary>
        </member>
        <member name="P:CDEntry.Year">
            <summary>
            Property Year (string)
            </summary>
        </member>
        <member name="P:CDEntry.Genre">
            <summary>
            Property Genre (string)
            </summary>
        </member>
        <member name="P:CDEntry.Tracks">
            <summary>
            Property Tracks (StringCollection)
            </summary>
        </member>
        <member name="P:CDEntry.ExtendedData">
            <summary>
            Property ExtendedData (string)
            </summary>
        </member>
        <member name="P:CDEntry.PlayOrder">
            <summary>
            Property PlayOrder (string)
            </summary>
        </member>
        <member name="T:QueryResult">
            <summary>
            Summary description for QueryResult.
            </summary>
        </member>
        <member name="P:QueryResult.ResponseCode">
            <summary>
            Property ResponseCode (string)
            </summary>
        </member>
        <member name="P:QueryResult.Category">
            <summary>
            Property Category (string)
            </summary>
        </member>
        <member name="P:QueryResult.Discid">
            <summary>
            Property Discid (string)
            </summary>
        </member>
        <member name="P:QueryResult.Artist">
            <summary>
            Property Artist (string)
            </summary>
        </member>
        <member name="P:QueryResult.Title">
            <summary>
            Property Title (string)
            </summary>
        </member>
        <member name="M:QueryResult.#ctor(System.String,System.Boolean)">
            <summary>
            The parsing for a queryresult returned as part of a number of matches is slightly different
            There is no response code
            </summary>
            <param name="queryResult"></param>
            <param name="multiMatchInput"> true if the result is part of multi-match which means it will not contain a response code</param>
        </member>
        <member name="M:QueryResult.Parse(System.String,System.Boolean)">
            <summary>
            Parse the query result line from the cddb server
            </summary>
            <param name="queryResult"></param>
        </member>
        <member name="T:IQueryResultCollection">
            <summary>
            Defines size, enumerators, and synchronization methods for strongly
            typed collections of <see cref="T:QueryResult"/> elements.
            </summary>
            <remarks>
            <b>IQueryResultCollection</b> provides an <see cref="T:System.Collections.ICollection"/>
            that is strongly typed for <see cref="T:QueryResult"/> elements.
            </remarks>
        </member>
        <member name="P:IQueryResultCollection.Count">
            <summary>
            Gets the number of elements contained in the
            <see cref="T:IQueryResultCollection"/>.
            </summary>
            <value>The number of elements contained in the
            <see cref="T:IQueryResultCollection"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ICollection.Count"/> for details.</remarks>
        </member>
        <member name="P:IQueryResultCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the
            <see cref="T:IQueryResultCollection"/> is synchronized (thread-safe).
            </summary>
            <value><c>true</c> if access to the <see cref="T:IQueryResultCollection"/> is
            synchronized (thread-safe); otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ICollection.IsSynchronized"/> for details.</remarks>
        </member>
        <member name="P:IQueryResultCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access
            to the <see cref="T:IQueryResultCollection"/>.
            </summary>
            <value>An object that can be used to synchronize access
            to the <see cref="T:IQueryResultCollection"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ICollection.SyncRoot"/> for details.</remarks>
        </member>
        <member name="M:IQueryResultCollection.CopyTo(QueryResult[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:IQueryResultCollection"/> to a one-dimensional <see cref="T:System.Array"/>
            of <see cref="T:QueryResult"/> elements, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the
            <see cref="T:QueryResult"/> elements copied from the <see cref="T:IQueryResultCollection"/>.
            The <b>Array</b> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/>
            at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <see cref="T:IQueryResultCollection"/> is greater
            than the available space from <paramref name="arrayIndex"/> to the end of the destination
            <paramref name="array"/>.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:IQueryResultCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:IQueryResultEnumerator"/> that can
            iterate through the <see cref="T:IQueryResultCollection"/>.
            </summary>
            <returns>An <see cref="T:IQueryResultEnumerator"/>
            for the entire <see cref="T:IQueryResultCollection"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.IEnumerable.GetEnumerator"/> for details.</remarks>
        </member>
        <member name="T:IQueryResultList">
            <summary>
            Represents a strongly typed collection of <see cref="T:QueryResult"/>
            objects that can be individually accessed by index.
            </summary>
            <remarks>
            <b>IQueryResultList</b> provides an <see cref="T:System.Collections.IList"/>
            that is strongly typed for <see cref="T:QueryResult"/> elements.
            </remarks>
        </member>
        <member name="P:IQueryResultList.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:IQueryResultList"/> has a fixed size.
            </summary>
            <value><c>true</c> if the <see cref="T:IQueryResultList"/> has a fixed size;
            otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.IList.IsFixedSize"/> for details.</remarks>
        </member>
        <member name="P:IQueryResultList.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:IQueryResultList"/> is read-only.
            </summary>
            <value><c>true</c> if the <see cref="T:IQueryResultList"/> is read-only;
            otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.IList.IsReadOnly"/> for details.</remarks>
        </member>
        <member name="P:IQueryResultList.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:QueryResult"/> element at the specified index.
            </summary>
            <param name="index">The zero-based index of the
            <see cref="T:QueryResult"/> element to get or set.</param>
            <value>
            The <see cref="T:QueryResult"/> element at the specified <paramref name="index"/>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than
            <see cref="P:IQueryResultCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The property is set and the <see cref="T:IQueryResultList"/> is read-only.</exception>
            <remarks>Please refer to <see cref="P:System.Collections.IList.Item(System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:IQueryResultList.Add(QueryResult)">
            <summary>
            Adds a <see cref="T:QueryResult"/> to the end
            of the <see cref="T:IQueryResultList"/>.
            </summary>
            <param name="value">The <see cref="T:QueryResult"/> object
            to be added to the end of the <see cref="T:IQueryResultList"/>.
            This argument can be a null reference.
            </param>
            <returns>The <see cref="T:IQueryResultList"/> index at which
            the <paramref name="value"/> has been added.</returns>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:IQueryResultList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IQueryResultList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Add(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:IQueryResultList.Clear">
            <summary>
            Removes all elements from the <see cref="T:IQueryResultList"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:IQueryResultList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IQueryResultList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Clear"/> for details.</remarks>
        </member>
        <member name="M:IQueryResultList.Contains(QueryResult)">
            <summary>
            Determines whether the <see cref="T:IQueryResultList"/>
            contains the specified <see cref="T:QueryResult"/> element.
            </summary>
            <param name="value">The <see cref="T:QueryResult"/> object
            to locate in the <see cref="T:IQueryResultList"/>.
            This argument can be a null reference.
            </param>
            <returns><c>true</c> if <paramref name="value"/> is found in the
            <see cref="T:IQueryResultList"/>; otherwise, <c>false</c>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Contains(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:IQueryResultList.IndexOf(QueryResult)">
            <summary>
            Returns the zero-based index of the first occurrence of the specified
            <see cref="T:QueryResult"/> in the <see cref="T:IQueryResultList"/>.
            </summary>
            <param name="value">The <see cref="T:QueryResult"/> object
            to locate in the <see cref="T:IQueryResultList"/>.
            This argument can be a null reference.
            </param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="value"/>
            in the <see cref="T:IQueryResultList"/>, if found; otherwise, -1.
            </returns>
            <remarks>Please refer to <see cref="M:System.Collections.IList.IndexOf(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:IQueryResultList.Insert(System.Int32,QueryResult)">
            <summary>
            Inserts a <see cref="T:QueryResult"/> element into the
            <see cref="T:IQueryResultList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which
            <paramref name="value"/> should be inserted.</param>
            <param name="value">The <see cref="T:QueryResult"/> object
            to insert into the <see cref="T:IQueryResultList"/>.
            This argument can be a null reference.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is greater than
            <see cref="P:IQueryResultCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:IQueryResultList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IQueryResultList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)"/> for details.</remarks>
        </member>
        <member name="M:IQueryResultList.Remove(QueryResult)">
            <summary>
            Removes the first occurrence of the specified <see cref="T:QueryResult"/>
            from the <see cref="T:IQueryResultList"/>.
            </summary>
            <param name="value">The <see cref="T:QueryResult"/> object
            to remove from the <see cref="T:IQueryResultList"/>.
            This argument can be a null reference.
            </param>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:IQueryResultList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IQueryResultList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Remove(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:IQueryResultList.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the
            <see cref="T:IQueryResultList"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than
            <see cref="P:IQueryResultCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:IQueryResultList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IQueryResultList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.RemoveAt(System.Int32)"/> for details.</remarks>
        </member>
        <member name="T:IQueryResultEnumerator">
            <summary>
            Supports type-safe iteration over a collection that
            contains <see cref="T:QueryResult"/> elements.
            </summary>
            <remarks>
            <b>IQueryResultEnumerator</b> provides an <see cref="T:System.Collections.IEnumerator"/>
            that is strongly typed for <see cref="T:QueryResult"/> elements.
            </remarks>
        </member>
        <member name="P:IQueryResultEnumerator.Current">
            <summary>
            Gets the current <see cref="T:QueryResult"/> element in the collection.
            </summary>
            <value>The current <see cref="T:QueryResult"/> element in the collection.</value>
            <exception cref="T:System.InvalidOperationException"><para>The enumerator is positioned
            before the first element of the collection or after the last element.</para>
            <para>-or-</para>
            <para>The collection was modified after the enumerator was created.</para></exception>
            <remarks>Please refer to <see cref="P:System.Collections.IEnumerator.Current"/> for details, but note
            that <b>Current</b> fails if the collection was modified since the last successful
            call to <see cref="M:IQueryResultEnumerator.MoveNext"/> or <see cref="M:IQueryResultEnumerator.Reset"/>.</remarks>
        </member>
        <member name="M:IQueryResultEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns><c>true</c> if the enumerator was successfully advanced to the next element;
            <c>false</c> if the enumerator has passed the end of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.IEnumerator.MoveNext"/> for details.</remarks>
        </member>
        <member name="M:IQueryResultEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position,
            which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.IEnumerator.Reset"/> for details.</remarks>
        </member>
        <member name="T:QueryResultCollection">
            <summary>
            Implements a strongly typed collection of <see cref="T:QueryResult"/> elements.
            </summary>
            <remarks><para>
            <b>QueryResultCollection</b> provides an <see cref="T:System.Collections.ArrayList"/>
            that is strongly typed for <see cref="T:QueryResult"/> elements.
            </para></remarks>
        </member>
        <member name="M:QueryResultCollection.#ctor">
            <overloads>
            Initializes a new instance of the <see cref="T:QueryResultCollection"/> class.
            </overloads>
            <summary>
            Initializes a new instance of the <see cref="T:QueryResultCollection"/> class
            that is empty and has the default initial capacity.
            </summary>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.#ctor"/> for details.</remarks>
        </member>
        <member name="M:QueryResultCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QueryResultCollection"/> class
            that is empty and has the specified initial capacity.
            </summary>
            <param name="capacity">The number of elements that the new
            <see cref="T:QueryResultCollection"/> is initially capable of storing.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity"/> is less than zero.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.#ctor(System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:QueryResultCollection.#ctor(QueryResultCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:QueryResultCollection"/> class
            that contains elements copied from the specified collection and
            that has the same initial capacity as the number of elements copied.
            </summary>
            <param name="collection">The <see cref="T:QueryResultCollection"/>
            whose elements are copied to the new collection.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is a null reference.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.#ctor(System.Collections.ICollection)"/> for details.</remarks>
        </member>
        <member name="M:QueryResultCollection.#ctor(QueryResult[])">
            <summary>
            Initializes a new instance of the <see cref="T:QueryResultCollection"/> class
            that contains elements copied from the specified <see cref="T:QueryResult"/>
            array and that has the same initial capacity as the number of elements copied.
            </summary>
            <param name="array">An <see cref="T:System.Array"/> of <see cref="T:QueryResult"/>
            elements that are copied to the new collection.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.#ctor(System.Collections.ICollection)"/> for details.</remarks>
        </member>
        <member name="P:QueryResultCollection.InnerArray">
            <summary>
            Gets the list of elements contained in the <see cref="T:QueryResultCollection"/> instance.
            </summary>
            <value>
            A one-dimensional <see cref="T:System.Array"/> with zero-based indexing that contains all 
            <see cref="T:QueryResult"/> elements in the <see cref="T:QueryResultCollection"/>.
            </value>
            <remarks>
            Use <b>InnerArray</b> to access the element array of a <see cref="T:QueryResultCollection"/>
            instance that might be a read-only or synchronized wrapper. This is necessary because
            the element array field of wrapper classes is always a null reference.
            </remarks>
        </member>
        <member name="P:QueryResultCollection.Capacity">
            <summary>
            Gets or sets the capacity of the <see cref="T:QueryResultCollection"/>.
            </summary>
            <value>The number of elements that the
            <see cref="T:QueryResultCollection"/> can contain.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <b>Capacity</b> is set to a value that is less than <see cref="P:QueryResultCollection.Count"/>.</exception>
            <remarks>Please refer to <see cref="P:System.Collections.ArrayList.Capacity"/> for details.</remarks>
        </member>
        <member name="P:QueryResultCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:QueryResultCollection"/>.
            </summary>
            <value>
            The number of elements contained in the <see cref="T:QueryResultCollection"/>.
            </value>
            <remarks>Please refer to <see cref="P:System.Collections.ArrayList.Count"/> for details.</remarks>
        </member>
        <member name="P:QueryResultCollection.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:QueryResultCollection"/> has a fixed size.
            </summary>
            <value><c>true</c> if the <see cref="T:QueryResultCollection"/> has a fixed size;
            otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ArrayList.IsFixedSize"/> for details.</remarks>
        </member>
        <member name="P:QueryResultCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:QueryResultCollection"/> is read-only.
            </summary>
            <value><c>true</c> if the <see cref="T:QueryResultCollection"/> is read-only;
            otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ArrayList.IsReadOnly"/> for details.</remarks>
        </member>
        <member name="P:QueryResultCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:QueryResultCollection"/>
            is synchronized (thread-safe).
            </summary>
            <value><c>true</c> if access to the <see cref="T:QueryResultCollection"/> is
            synchronized (thread-safe); otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ArrayList.IsSynchronized"/> for details.</remarks>
        </member>
        <member name="P:QueryResultCollection.IsUnique">
            <summary>
            Gets a value indicating whether the <see cref="T:QueryResultCollection"/> 
            ensures that all elements are unique.
            </summary>
            <value>
            <c>true</c> if the <see cref="T:QueryResultCollection"/> ensures that all 
            elements are unique; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
            <remarks>
            <b>IsUnique</b> returns <c>true</c> exactly if the <see cref="T:QueryResultCollection"/>
            is exposed through a <see cref="M:QueryResultCollection.Unique(QueryResultCollection)"/> wrapper. 
            Please refer to <see cref="M:QueryResultCollection.Unique(QueryResultCollection)"/> for details.
            </remarks>
        </member>
        <member name="P:QueryResultCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:QueryResult"/> element at the specified index.
            </summary>
            <param name="index">The zero-based index of the
            <see cref="T:QueryResult"/> element to get or set.</param>
            <value>
            The <see cref="T:QueryResult"/> element at the specified <paramref name="index"/>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than <see cref="P:QueryResultCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException"><para>
            The property is set and the <see cref="T:QueryResultCollection"/> is read-only.
            </para><para>-or-</para><para>
            The property is set, the <b>QueryResultCollection</b> already contains the
            specified element at a different index, and the <b>QueryResultCollection</b>
            ensures that all elements are unique.</para></exception>
            <remarks>Please refer to <see cref="P:System.Collections.ArrayList.Item(System.Int32)"/> for details.</remarks>
        </member>
        <member name="P:QueryResultCollection.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <value>
            The element at the specified <paramref name="index"/>. When the property
            is set, this value must be compatible with <see cref="T:QueryResult"/>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than <see cref="P:QueryResultCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.InvalidCastException">The property is set to a value
            that is not compatible with <see cref="T:QueryResult"/>.</exception>
            <exception cref="T:System.NotSupportedException"><para>
            The property is set and the <see cref="T:QueryResultCollection"/> is read-only.
            </para><para>-or-</para><para>
            The property is set, the <b>QueryResultCollection</b> already contains the
            specified element at a different index, and the <b>QueryResultCollection</b>
            ensures that all elements are unique.</para></exception>
            <remarks>Please refer to <see cref="P:System.Collections.ArrayList.Item(System.Int32)"/> for details.</remarks>
        </member>
        <member name="P:QueryResultCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize
            access to the <see cref="T:QueryResultCollection"/>.
            </summary>
            <value>An object that can be used to synchronize
            access to the <see cref="T:QueryResultCollection"/>.
            </value>
            <remarks>Please refer to <see cref="P:System.Collections.ArrayList.SyncRoot"/> for details.</remarks>
        </member>
        <member name="M:QueryResultCollection.Add(QueryResult)">
            <summary>
            Adds a <see cref="T:QueryResult"/> to the end of the <see cref="T:QueryResultCollection"/>.
            </summary>
            <param name="value">The <see cref="T:QueryResult"/> object
            to be added to the end of the <see cref="T:QueryResultCollection"/>.
            This argument can be a null reference.
            </param>
            <returns>The <see cref="T:QueryResultCollection"/> index at which the
            <paramref name="value"/> has been added.</returns>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:QueryResultCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>QueryResultCollection</b> has a fixed size.</para>
            <para>-or-</para>
            <para>The <b>QueryResultCollection</b> already contains the specified
            <paramref name="value"/>, and the <b>QueryResultCollection</b>
            ensures that all elements are unique.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Add(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:QueryResultCollection.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an <see cref="T:System.Object"/> to the end of the <see cref="T:QueryResultCollection"/>.
            </summary>
            <param name="value">
            The object to be added to the end of the <see cref="T:QueryResultCollection"/>.
            This argument must be compatible with <see cref="T:QueryResult"/>.
            This argument can be a null reference.
            </param>
            <returns>The <see cref="T:QueryResultCollection"/> index at which the
            <paramref name="value"/> has been added.</returns>
            <exception cref="T:System.InvalidCastException"><paramref name="value"/>
            is not compatible with <see cref="T:QueryResult"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:QueryResultCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>QueryResultCollection</b> has a fixed size.</para>
            <para>-or-</para>
            <para>The <b>QueryResultCollection</b> already contains the specified
            <paramref name="value"/>, and the <b>QueryResultCollection</b>
            ensures that all elements are unique.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Add(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:QueryResultCollection.AddRange(QueryResultCollection)">
            <overloads>
            Adds a range of elements to the end of the <see cref="T:QueryResultCollection"/>.
            </overloads>
            <summary>
            Adds the elements of another collection to the end of the <see cref="T:QueryResultCollection"/>.
            </summary>
            <param name="collection">The <see cref="T:QueryResultCollection"/> whose elements
            should be added to the end of the current collection.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is a null reference.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:QueryResultCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>QueryResultCollection</b> has a fixed size.</para>
            <para>-or-</para>
            <para>The <b>QueryResultCollection</b> already contains one or more elements
            in the specified <paramref name="collection"/>, and the <b>QueryResultCollection</b>
            ensures that all elements are unique.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)"/> for details.</remarks>
        </member>
        <member name="M:QueryResultCollection.AddRange(QueryResult[])">
            <summary>
            Adds the elements of a <see cref="T:QueryResult"/> array
            to the end of the <see cref="T:QueryResultCollection"/>.
            </summary>
            <param name="array">An <see cref="T:System.Array"/> of <see cref="T:QueryResult"/> elements
            that should be added to the end of the <see cref="T:QueryResultCollection"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:QueryResultCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>QueryResultCollection</b> has a fixed size.</para>
            <para>-or-</para>
            <para>The <b>QueryResultCollection</b> already contains one or more elements
            in the specified <paramref name="array"/>, and the <b>QueryResultCollection</b>
            ensures that all elements are unique.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)"/> for details.</remarks>
        </member>
        <member name="M:QueryResultCollection.BinarySearch(QueryResult)">
            <summary>
            Searches the entire sorted <see cref="T:QueryResultCollection"/> for an
            <see cref="T:QueryResult"/> element using the default comparer
            and returns the zero-based index of the element.
            </summary>
            <param name="value">The <see cref="T:QueryResult"/> object
            to locate in the <see cref="T:QueryResultCollection"/>.
            This argument can be a null reference.
            </param>
            <returns>The zero-based index of <paramref name="value"/> in the sorted
            <see cref="T:QueryResultCollection"/>, if <paramref name="value"/> is found;
            otherwise, a negative number, which is the bitwise complement of the index
            of the next element that is larger than <paramref name="value"/> or, if there
            is no larger element, the bitwise complement of <see cref="P:QueryResultCollection.Count"/>.</returns>
            <exception cref="T:System.InvalidOperationException">
            Neither <paramref name="value"/> nor the elements of the <see cref="T:QueryResultCollection"/>
            implement the <see cref="T:System.IComparable"/> interface.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)"/> for details.</remarks>
        </member>
        <member name="M:QueryResultCollection.Clear">
            <summary>
            Removes all elements from the <see cref="T:QueryResultCollection"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:QueryResultCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>QueryResultCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Clear"/> for details.</remarks>
        </member>
        <member name="M:QueryResultCollection.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:QueryResultCollection"/>.
            </summary>
            <returns>A shallow copy of the <see cref="T:QueryResultCollection"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Clone"/> for details.</remarks>
        </member>
        <member name="M:QueryResultCollection.Contains(QueryResult)">
            <summary>
            Determines whether the <see cref="T:QueryResultCollection"/>
            contains the specified <see cref="T:QueryResult"/> element.
            </summary>
            <param name="value">The <see cref="T:QueryResult"/> object
            to locate in the <see cref="T:QueryResultCollection"/>.
            This argument can be a null reference.
            </param>
            <returns><c>true</c> if <paramref name="value"/> is found in the
            <see cref="T:QueryResultCollection"/>; otherwise, <c>false</c>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Contains(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:QueryResultCollection.System#Collections#IList#Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:QueryResultCollection"/> contains the specified element.
            </summary>
            <param name="value">The object to locate in the <see cref="T:QueryResultCollection"/>.
            This argument must be compatible with <see cref="T:QueryResult"/>.
            This argument can be a null reference.
            </param>
            <returns><c>true</c> if <paramref name="value"/> is found in the
            <see cref="T:QueryResultCollection"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.InvalidCastException"><paramref name="value"/>
            is not compatible with <see cref="T:QueryResult"/>.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Contains(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:QueryResultCollection.CopyTo(QueryResult[])">
            <overloads>
            Copies the <see cref="T:QueryResultCollection"/> or a portion of it to a one-dimensional array.
            </overloads>
            <summary>
            Copies the entire <see cref="T:QueryResultCollection"/> to a one-dimensional <see cref="T:System.Array"/>
            of <see cref="T:QueryResult"/> elements, starting at the beginning of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the
            <see cref="T:QueryResult"/> elements copied from the <see cref="T:QueryResultCollection"/>.
            The <b>Array</b> must have zero-based indexing.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException">
            The number of elements in the source <see cref="T:QueryResultCollection"/> is greater
            than the available space in the destination <paramref name="array"/>.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.CopyTo(System.Array)"/> for details.</remarks>
        </member>
        <member name="M:QueryResultCollection.CopyTo(QueryResult[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:QueryResultCollection"/> to a one-dimensional <see cref="T:System.Array"/>
            of <see cref="T:QueryResult"/> elements, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the
            <see cref="T:QueryResult"/> elements copied from the <see cref="T:QueryResultCollection"/>.
            The <b>Array</b> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/>
            at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <see cref="T:QueryResultCollection"/> is greater than the
            available space from <paramref name="arrayIndex"/> to the end of the destination
            <paramref name="array"/>.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.CopyTo(System.Array)"/> for details.</remarks>
        </member>
        <member name="M:QueryResultCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the entire <see cref="T:QueryResultCollection"/> to a one-dimensional <see cref="T:System.Array"/>,
            starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the
            <see cref="T:QueryResult"/> elements copied from the <see cref="T:QueryResultCollection"/>.
            The <b>Array</b> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/>
            at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="array"/> is multidimensional.
            </para><para>-or-</para><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <see cref="T:QueryResultCollection"/> is greater than the
            available space from <paramref name="arrayIndex"/> to the end of the destination
            <paramref name="array"/>.</para></exception>
            <exception cref="T:System.InvalidCastException">
            The <see cref="T:QueryResult"/> type cannot be cast automatically
            to the type of the destination <paramref name="array"/>.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.CopyTo(System.Array)"/> for details.</remarks>
        </member>
        <member name="M:QueryResultCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:IQueryResultEnumerator"/> that can
            iterate through the <see cref="T:QueryResultCollection"/>.
            </summary>
            <returns>An <see cref="T:IQueryResultEnumerator"/>
            for the entire <see cref="T:QueryResultCollection"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.GetEnumerator"/> for details.</remarks>
        </member>
        <member name="M:QueryResultCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/> that can
            iterate through the <see cref="T:QueryResultCollection"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/>
            for the entire <see cref="T:QueryResultCollection"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.GetEnumerator"/> for details.</remarks>
        </member>
        <member name="M:QueryResultCollection.IndexOf(QueryResult)">
            <summary>
            Returns the zero-based index of the first occurrence of the specified
            <see cref="T:QueryResult"/> in the <see cref="T:QueryResultCollection"/>.
            </summary>
            <param name="value">The <see cref="T:QueryResult"/> object
            to locate in the <see cref="T:QueryResultCollection"/>.
            This argument can be a null reference.
            </param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="value"/>
            in the <see cref="T:QueryResultCollection"/>, if found; otherwise, -1.
            </returns>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.IndexOf(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:QueryResultCollection.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Returns the zero-based index of the first occurrence of the specified
            <see cref="T:System.Object"/> in the <see cref="T:QueryResultCollection"/>.
            </summary>
            <param name="value">The object to locate in the <see cref="T:QueryResultCollection"/>.
            This argument must be compatible with <see cref="T:QueryResult"/>.
            This argument can be a null reference.
            </param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="value"/>
            in the <see cref="T:QueryResultCollection"/>, if found; otherwise, -1.
            </returns>
            <exception cref="T:System.InvalidCastException"><paramref name="value"/>
            is not compatible with <see cref="T:QueryResult"/>.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.IndexOf(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:QueryResultCollection.Insert(System.Int32,QueryResult)">
            <summary>
            Inserts a <see cref="T:QueryResult"/> element into the
            <see cref="T:QueryResultCollection"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="value"/>
            should be inserted.</param>
            <param name="value">The <see cref="T:QueryResult"/> object
            to insert into the <see cref="T:QueryResultCollection"/>.
            This argument can be a null reference.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is greater than <see cref="P:QueryResultCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:QueryResultCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>QueryResultCollection</b> has a fixed size.</para>
            <para>-or-</para>
            <para>The <b>QueryResultCollection</b> already contains the specified
            <paramref name="value"/>, and the <b>QueryResultCollection</b>
            ensures that all elements are unique.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Insert(System.Int32,System.Object)"/> for details.</remarks>
        </member>
        <member name="M:QueryResultCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts an element into the <see cref="T:QueryResultCollection"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="value"/>
            should be inserted.</param>
            <param name="value">The object to insert into the <see cref="T:QueryResultCollection"/>.
            This argument must be compatible with <see cref="T:QueryResult"/>.
            This argument can be a null reference.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is greater than <see cref="P:QueryResultCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.InvalidCastException"><paramref name="value"/>
            is not compatible with <see cref="T:QueryResult"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:QueryResultCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>QueryResultCollection</b> has a fixed size.</para>
            <para>-or-</para>
            <para>The <b>QueryResultCollection</b> already contains the specified
            <paramref name="value"/>, and the <b>QueryResultCollection</b>
            ensures that all elements are unique.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Insert(System.Int32,System.Object)"/> for details.</remarks>
        </member>
        <member name="M:QueryResultCollection.ReadOnly(QueryResultCollection)">
            <summary>
            Returns a read-only wrapper for the specified <see cref="T:QueryResultCollection"/>.
            </summary>
            <param name="collection">The <see cref="T:QueryResultCollection"/> to wrap.</param>
            <returns>A read-only wrapper around <paramref name="collection"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is a null reference.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.ReadOnly(System.Collections.IList)"/> for details.</remarks>
        </member>
        <member name="M:QueryResultCollection.Remove(QueryResult)">
            <summary>
            Removes the first occurrence of the specified <see cref="T:QueryResult"/>
            from the <see cref="T:QueryResultCollection"/>.
            </summary>
            <param name="value">The <see cref="T:QueryResult"/> object
            to remove from the <see cref="T:QueryResultCollection"/>.
            This argument can be a null reference.
            </param>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:QueryResultCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>QueryResultCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Remove(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:QueryResultCollection.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the first occurrence of the specified <see cref="T:System.Object"/>
            from the <see cref="T:QueryResultCollection"/>.
            </summary>
            <param name="value">The object to remove from the <see cref="T:QueryResultCollection"/>.
            This argument must be compatible with <see cref="T:QueryResult"/>.
            This argument can be a null reference.
            </param>
            <exception cref="T:System.InvalidCastException"><paramref name="value"/>
            is not compatible with <see cref="T:QueryResult"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:QueryResultCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>QueryResultCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Remove(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:QueryResultCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:QueryResultCollection"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than <see cref="P:QueryResultCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:QueryResultCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>QueryResultCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.RemoveAt(System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:QueryResultCollection.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes the specified range of elements from the <see cref="T:QueryResultCollection"/>.
            </summary>
            <param name="index">The zero-based starting index of the range
            of elements to remove.</param>
            <param name="count">The number of elements to remove.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> and <paramref name="count"/> do not denote a
            valid range of elements in the <see cref="T:QueryResultCollection"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="count"/> is less than zero.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:QueryResultCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>QueryResultCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:QueryResultCollection.Reverse">
            <overloads>
            Reverses the order of the elements in the 
            <see cref="T:QueryResultCollection"/> or a portion of it.
            </overloads>
            <summary>
            Reverses the order of the elements in the entire <see cref="T:QueryResultCollection"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:QueryResultCollection"/> is read-only.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Reverse"/> for details.</remarks>
        </member>
        <member name="M:QueryResultCollection.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverses the order of the elements in the specified range.
            </summary>
            <param name="index">The zero-based starting index of the range
            of elements to reverse.</param>
            <param name="count">The number of elements to reverse.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> and <paramref name="count"/> do not denote a
            valid range of elements in the <see cref="T:QueryResultCollection"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="count"/> is less than zero.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:QueryResultCollection"/> is read-only.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Reverse"/> for details.</remarks>
        </member>
        <member name="M:QueryResultCollection.Sort">
            <overloads>
            Sorts the elements in the <see cref="T:QueryResultCollection"/> or a portion of it.
            </overloads>
            <summary>
            Sorts the elements in the entire <see cref="T:QueryResultCollection"/>
            using the <see cref="T:System.IComparable"/> implementation of each element.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:QueryResultCollection"/> is read-only.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Sort"/> for details.</remarks>
        </member>
        <member name="M:QueryResultCollection.Sort(System.Collections.IComparer)">
            <summary>
            Sorts the elements in the entire <see cref="T:QueryResultCollection"/>
            using the specified <see cref="T:System.Collections.IComparer"/> interface.
            </summary>
            <param name="comparer">
            <para>The <see cref="T:System.Collections.IComparer"/> implementation to use when comparing elements.</para>
            <para>-or-</para>
            <para>A null reference to use the <see cref="T:System.IComparable"/> implementation 
            of each element.</para></param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:QueryResultCollection"/> is read-only.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Sort"/> for details.</remarks>
        </member>
        <member name="M:QueryResultCollection.Sort(System.Int32,System.Int32,System.Collections.IComparer)">
            <summary>
            Sorts the elements in the specified range 
            using the specified <see cref="T:System.Collections.IComparer"/> interface.
            </summary>
            <param name="index">The zero-based starting index of the range
            of elements to sort.</param>
            <param name="count">The number of elements to sort.</param>
            <param name="comparer">
            <para>The <see cref="T:System.Collections.IComparer"/> implementation to use when comparing elements.</para>
            <para>-or-</para>
            <para>A null reference to use the <see cref="T:System.IComparable"/> implementation 
            of each element.</para></param>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> and <paramref name="count"/> do not denote a
            valid range of elements in the <see cref="T:QueryResultCollection"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="count"/> is less than zero.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:QueryResultCollection"/> is read-only.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Sort"/> for details.</remarks>
        </member>
        <member name="M:QueryResultCollection.Synchronized(QueryResultCollection)">
            <summary>
            Returns a synchronized (thread-safe) wrapper
            for the specified <see cref="T:QueryResultCollection"/>.
            </summary>
            <param name="collection">The <see cref="T:QueryResultCollection"/> to synchronize.</param>
            <returns>
            A synchronized (thread-safe) wrapper around <paramref name="collection"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is a null reference.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Synchronized(System.Collections.IList)"/> for details.</remarks>
        </member>
        <member name="M:QueryResultCollection.ToArray">
            <summary>
            Copies the elements of the <see cref="T:QueryResultCollection"/> to a new
            <see cref="T:System.Array"/> of <see cref="T:QueryResult"/> elements.
            </summary>
            <returns>A one-dimensional <see cref="T:System.Array"/> of <see cref="T:QueryResult"/>
            elements containing copies of the elements of the <see cref="T:QueryResultCollection"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.ToArray"/> for details.</remarks>
        </member>
        <member name="M:QueryResultCollection.TrimToSize">
            <summary>
            Sets the capacity to the actual number of elements in the <see cref="T:QueryResultCollection"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:QueryResultCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>QueryResultCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.TrimToSize"/> for details.</remarks>
        </member>
        <member name="M:QueryResultCollection.Unique(QueryResultCollection)">
            <summary>
            Returns a wrapper for the specified <see cref="T:QueryResultCollection"/>
            ensuring that all elements are unique.
            </summary>
            <param name="collection">The <see cref="T:QueryResultCollection"/> to wrap.</param>    
            <returns>
            A wrapper around <paramref name="collection"/> ensuring that all elements are unique.
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="collection"/> contains duplicate elements.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is a null reference.</exception>
            <remarks><para>
            The <b>Unique</b> wrapper provides a set-like collection by ensuring
            that all elements in the <see cref="T:QueryResultCollection"/> are unique.
            </para><para>
            <b>Unique</b> raises an <see cref="T:System.ArgumentException"/> if the specified 
            <paramref name="collection"/> contains any duplicate elements. The returned
            wrapper raises a <see cref="T:System.NotSupportedException"/> whenever the user attempts 
            to add an element that is already contained in the <b>QueryResultCollection</b>.
            </para><para>
            <strong>Note:</strong> The <b>Unique</b> wrapper reflects any changes made
            to the underlying <paramref name="collection"/>, including the possible
            creation of duplicate elements. The uniqueness of all elements is therefore
            no longer assured if the underlying collection is manipulated directly.
            </para></remarks>
        </member>
        <member name="T:Site">
            <summary>
            Summary description for Site.
            </summary>
        </member>
        <member name="P:Site.AdditionalAddressInfo">
            <summary>
            Property AdditionalAddressInfo (string)
            Any additional addressing information needed to access the server.
            For example, for HTTP protocol servers, this would be the path to the CCDB server CGI script.
            This field will be "-" if no additional addressing information is needed.
            </summary>
        </member>
        <member name="P:Site.SiteAddress">
            <summary>
            Property Site (string) - Internet address of the remote site 
            </summary>
        </member>
        <member name="P:Site.Protocol">
            <summary>
            Property Protocol (string)
            The transfer protocol used to access the site
            </summary>
        </member>
        <member name="P:Site.Port">
            <summary>
            Property Port (string)- The port at which the server resides on that site.
            </summary>
        </member>
        <member name="P:Site.Description">
            <summary>
            Property Description (string)
            A short description of the geographical location of the site.
            </summary>
        </member>
        <member name="P:Site.Latitude">
            <summary>
            Property Latitude (string)
            The latitude of the server site. The format is as follows:
            CDDD.MM
            Where "C" is the compass direction (N, S), "DDD" is the
            degrees, and "MM" is the minutes.
            </summary>
        </member>
        <member name="P:Site.Longitude">
            <summary>
            Property Longitude (string)
            The longitude of the server site. Format is as above, except
            the compass direction must be one of (E, W).
            </summary>
        </member>
        <member name="M:Site.#ctor(System.String,System.String,System.String)">
            <summary>
            Builds a site from an address, protocol and addition info
            </summary>
            <param name="siteAddress"></param>
            <param name="protocol"></param>
            <param name="additionAddressInfo"></param>
        </member>
        <member name="T:ISiteCollection">
            <summary>
            Defines size, enumerators, and synchronization methods for strongly
            typed collections of <see cref="T:Site"/> elements.
            </summary>
            <remarks>
            <b>ISiteCollection</b> provides an <see cref="T:System.Collections.ICollection"/>
            that is strongly typed for <see cref="T:Site"/> elements.
            </remarks>
        </member>
        <member name="P:ISiteCollection.Count">
            <summary>
            Gets the number of elements contained in the
            <see cref="T:ISiteCollection"/>.
            </summary>
            <value>The number of elements contained in the
            <see cref="T:ISiteCollection"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ICollection.Count"/> for details.</remarks>
        </member>
        <member name="P:ISiteCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the
            <see cref="T:ISiteCollection"/> is synchronized (thread-safe).
            </summary>
            <value><c>true</c> if access to the <see cref="T:ISiteCollection"/> is
            synchronized (thread-safe); otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ICollection.IsSynchronized"/> for details.</remarks>
        </member>
        <member name="P:ISiteCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access
            to the <see cref="T:ISiteCollection"/>.
            </summary>
            <value>An object that can be used to synchronize access
            to the <see cref="T:ISiteCollection"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ICollection.SyncRoot"/> for details.</remarks>
        </member>
        <member name="M:ISiteCollection.CopyTo(Site[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:ISiteCollection"/> to a one-dimensional <see cref="T:System.Array"/>
            of <see cref="T:Site"/> elements, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the
            <see cref="T:Site"/> elements copied from the <see cref="T:ISiteCollection"/>.
            The <b>Array</b> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/>
            at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <see cref="T:ISiteCollection"/> is greater
            than the available space from <paramref name="arrayIndex"/> to the end of the destination
            <paramref name="array"/>.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:ISiteCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:ISiteEnumerator"/> that can
            iterate through the <see cref="T:ISiteCollection"/>.
            </summary>
            <returns>An <see cref="T:ISiteEnumerator"/>
            for the entire <see cref="T:ISiteCollection"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.IEnumerable.GetEnumerator"/> for details.</remarks>
        </member>
        <member name="T:ISiteList">
            <summary>
            Represents a strongly typed collection of <see cref="T:Site"/>
            objects that can be individually accessed by index.
            </summary>
            <remarks>
            <b>ISiteList</b> provides an <see cref="T:System.Collections.IList"/>
            that is strongly typed for <see cref="T:Site"/> elements.
            </remarks>
        </member>
        <member name="P:ISiteList.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:ISiteList"/> has a fixed size.
            </summary>
            <value><c>true</c> if the <see cref="T:ISiteList"/> has a fixed size;
            otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.IList.IsFixedSize"/> for details.</remarks>
        </member>
        <member name="P:ISiteList.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:ISiteList"/> is read-only.
            </summary>
            <value><c>true</c> if the <see cref="T:ISiteList"/> is read-only;
            otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.IList.IsReadOnly"/> for details.</remarks>
        </member>
        <member name="P:ISiteList.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Site"/> element at the specified index.
            </summary>
            <param name="index">The zero-based index of the
            <see cref="T:Site"/> element to get or set.</param>
            <value>
            The <see cref="T:Site"/> element at the specified <paramref name="index"/>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than
            <see cref="P:ISiteCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The property is set and the <see cref="T:ISiteList"/> is read-only.</exception>
            <remarks>Please refer to <see cref="P:System.Collections.IList.Item(System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:ISiteList.Add(Site)">
            <summary>
            Adds a <see cref="T:Site"/> to the end
            of the <see cref="T:ISiteList"/>.
            </summary>
            <param name="value">The <see cref="T:Site"/> object
            to be added to the end of the <see cref="T:ISiteList"/>.
            This argument can be a null reference.
            </param>
            <returns>The <see cref="T:ISiteList"/> index at which
            the <paramref name="value"/> has been added.</returns>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:ISiteList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>ISiteList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Add(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:ISiteList.Clear">
            <summary>
            Removes all elements from the <see cref="T:ISiteList"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:ISiteList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>ISiteList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Clear"/> for details.</remarks>
        </member>
        <member name="M:ISiteList.Contains(Site)">
            <summary>
            Determines whether the <see cref="T:ISiteList"/>
            contains the specified <see cref="T:Site"/> element.
            </summary>
            <param name="value">The <see cref="T:Site"/> object
            to locate in the <see cref="T:ISiteList"/>.
            This argument can be a null reference.
            </param>
            <returns><c>true</c> if <paramref name="value"/> is found in the
            <see cref="T:ISiteList"/>; otherwise, <c>false</c>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Contains(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:ISiteList.IndexOf(Site)">
            <summary>
            Returns the zero-based index of the first occurrence of the specified
            <see cref="T:Site"/> in the <see cref="T:ISiteList"/>.
            </summary>
            <param name="value">The <see cref="T:Site"/> object
            to locate in the <see cref="T:ISiteList"/>.
            This argument can be a null reference.
            </param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="value"/>
            in the <see cref="T:ISiteList"/>, if found; otherwise, -1.
            </returns>
            <remarks>Please refer to <see cref="M:System.Collections.IList.IndexOf(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:ISiteList.Insert(System.Int32,Site)">
            <summary>
            Inserts a <see cref="T:Site"/> element into the
            <see cref="T:ISiteList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which
            <paramref name="value"/> should be inserted.</param>
            <param name="value">The <see cref="T:Site"/> object
            to insert into the <see cref="T:ISiteList"/>.
            This argument can be a null reference.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is greater than
            <see cref="P:ISiteCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:ISiteList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>ISiteList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)"/> for details.</remarks>
        </member>
        <member name="M:ISiteList.Remove(Site)">
            <summary>
            Removes the first occurrence of the specified <see cref="T:Site"/>
            from the <see cref="T:ISiteList"/>.
            </summary>
            <param name="value">The <see cref="T:Site"/> object
            to remove from the <see cref="T:ISiteList"/>.
            This argument can be a null reference.
            </param>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:ISiteList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>ISiteList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Remove(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:ISiteList.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the
            <see cref="T:ISiteList"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than
            <see cref="P:ISiteCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:ISiteList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>ISiteList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.RemoveAt(System.Int32)"/> for details.</remarks>
        </member>
        <member name="T:ISiteEnumerator">
            <summary>
            Supports type-safe iteration over a collection that
            contains <see cref="T:Site"/> elements.
            </summary>
            <remarks>
            <b>ISiteEnumerator</b> provides an <see cref="T:System.Collections.IEnumerator"/>
            that is strongly typed for <see cref="T:Site"/> elements.
            </remarks>
        </member>
        <member name="P:ISiteEnumerator.Current">
            <summary>
            Gets the current <see cref="T:Site"/> element in the collection.
            </summary>
            <value>The current <see cref="T:Site"/> element in the collection.</value>
            <exception cref="T:System.InvalidOperationException"><para>The enumerator is positioned
            before the first element of the collection or after the last element.</para>
            <para>-or-</para>
            <para>The collection was modified after the enumerator was created.</para></exception>
            <remarks>Please refer to <see cref="P:System.Collections.IEnumerator.Current"/> for details, but note
            that <b>Current</b> fails if the collection was modified since the last successful
            call to <see cref="M:ISiteEnumerator.MoveNext"/> or <see cref="M:ISiteEnumerator.Reset"/>.</remarks>
        </member>
        <member name="M:ISiteEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns><c>true</c> if the enumerator was successfully advanced to the next element;
            <c>false</c> if the enumerator has passed the end of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.IEnumerator.MoveNext"/> for details.</remarks>
        </member>
        <member name="M:ISiteEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position,
            which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.IEnumerator.Reset"/> for details.</remarks>
        </member>
        <member name="T:SiteCollection">
            <summary>
            Implements a strongly typed collection of <see cref="T:Site"/> elements.
            </summary>
            <remarks><para>
            <b>SiteCollection</b> provides an <see cref="T:System.Collections.ArrayList"/>
            that is strongly typed for <see cref="T:Site"/> elements.
            </para></remarks>
        </member>
        <member name="M:SiteCollection.#ctor">
            <overloads>
            Initializes a new instance of the <see cref="T:SiteCollection"/> class.
            </overloads>
            <summary>
            Initializes a new instance of the <see cref="T:SiteCollection"/> class
            that is empty and has the default initial capacity.
            </summary>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.#ctor"/> for details.</remarks>
        </member>
        <member name="M:SiteCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SiteCollection"/> class
            that is empty and has the specified initial capacity.
            </summary>
            <param name="capacity">The number of elements that the new
            <see cref="T:SiteCollection"/> is initially capable of storing.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity"/> is less than zero.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.#ctor(System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:SiteCollection.#ctor(SiteCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:SiteCollection"/> class
            that contains elements copied from the specified collection and
            that has the same initial capacity as the number of elements copied.
            </summary>
            <param name="collection">The <see cref="T:SiteCollection"/>
            whose elements are copied to the new collection.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is a null reference.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.#ctor(System.Collections.ICollection)"/> for details.</remarks>
        </member>
        <member name="M:SiteCollection.#ctor(Site[])">
            <summary>
            Initializes a new instance of the <see cref="T:SiteCollection"/> class
            that contains elements copied from the specified <see cref="T:Site"/>
            array and that has the same initial capacity as the number of elements copied.
            </summary>
            <param name="array">An <see cref="T:System.Array"/> of <see cref="T:Site"/>
            elements that are copied to the new collection.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.#ctor(System.Collections.ICollection)"/> for details.</remarks>
        </member>
        <member name="P:SiteCollection.InnerArray">
            <summary>
            Gets the list of elements contained in the <see cref="T:SiteCollection"/> instance.
            </summary>
            <value>
            A one-dimensional <see cref="T:System.Array"/> with zero-based indexing that contains all 
            <see cref="T:Site"/> elements in the <see cref="T:SiteCollection"/>.
            </value>
            <remarks>
            Use <b>InnerArray</b> to access the element array of a <see cref="T:SiteCollection"/>
            instance that might be a read-only or synchronized wrapper. This is necessary because
            the element array field of wrapper classes is always a null reference.
            </remarks>
        </member>
        <member name="P:SiteCollection.Capacity">
            <summary>
            Gets or sets the capacity of the <see cref="T:SiteCollection"/>.
            </summary>
            <value>The number of elements that the
            <see cref="T:SiteCollection"/> can contain.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <b>Capacity</b> is set to a value that is less than <see cref="P:SiteCollection.Count"/>.</exception>
            <remarks>Please refer to <see cref="P:System.Collections.ArrayList.Capacity"/> for details.</remarks>
        </member>
        <member name="P:SiteCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:SiteCollection"/>.
            </summary>
            <value>
            The number of elements contained in the <see cref="T:SiteCollection"/>.
            </value>
            <remarks>Please refer to <see cref="P:System.Collections.ArrayList.Count"/> for details.</remarks>
        </member>
        <member name="P:SiteCollection.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:SiteCollection"/> has a fixed size.
            </summary>
            <value><c>true</c> if the <see cref="T:SiteCollection"/> has a fixed size;
            otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ArrayList.IsFixedSize"/> for details.</remarks>
        </member>
        <member name="P:SiteCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:SiteCollection"/> is read-only.
            </summary>
            <value><c>true</c> if the <see cref="T:SiteCollection"/> is read-only;
            otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ArrayList.IsReadOnly"/> for details.</remarks>
        </member>
        <member name="P:SiteCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:SiteCollection"/>
            is synchronized (thread-safe).
            </summary>
            <value><c>true</c> if access to the <see cref="T:SiteCollection"/> is
            synchronized (thread-safe); otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ArrayList.IsSynchronized"/> for details.</remarks>
        </member>
        <member name="P:SiteCollection.IsUnique">
            <summary>
            Gets a value indicating whether the <see cref="T:SiteCollection"/> 
            ensures that all elements are unique.
            </summary>
            <value>
            <c>true</c> if the <see cref="T:SiteCollection"/> ensures that all 
            elements are unique; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
            <remarks>
            <b>IsUnique</b> returns <c>true</c> exactly if the <see cref="T:SiteCollection"/>
            is exposed through a <see cref="M:SiteCollection.Unique(SiteCollection)"/> wrapper. 
            Please refer to <see cref="M:SiteCollection.Unique(SiteCollection)"/> for details.
            </remarks>
        </member>
        <member name="P:SiteCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Site"/> element at the specified index.
            </summary>
            <param name="index">The zero-based index of the
            <see cref="T:Site"/> element to get or set.</param>
            <value>
            The <see cref="T:Site"/> element at the specified <paramref name="index"/>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than <see cref="P:SiteCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException"><para>
            The property is set and the <see cref="T:SiteCollection"/> is read-only.
            </para><para>-or-</para><para>
            The property is set, the <b>SiteCollection</b> already contains the
            specified element at a different index, and the <b>SiteCollection</b>
            ensures that all elements are unique.</para></exception>
            <remarks>Please refer to <see cref="P:System.Collections.ArrayList.Item(System.Int32)"/> for details.</remarks>
        </member>
        <member name="P:SiteCollection.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <value>
            The element at the specified <paramref name="index"/>. When the property
            is set, this value must be compatible with <see cref="T:Site"/>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than <see cref="P:SiteCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.InvalidCastException">The property is set to a value
            that is not compatible with <see cref="T:Site"/>.</exception>
            <exception cref="T:System.NotSupportedException"><para>
            The property is set and the <see cref="T:SiteCollection"/> is read-only.
            </para><para>-or-</para><para>
            The property is set, the <b>SiteCollection</b> already contains the
            specified element at a different index, and the <b>SiteCollection</b>
            ensures that all elements are unique.</para></exception>
            <remarks>Please refer to <see cref="P:System.Collections.ArrayList.Item(System.Int32)"/> for details.</remarks>
        </member>
        <member name="P:SiteCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize
            access to the <see cref="T:SiteCollection"/>.
            </summary>
            <value>An object that can be used to synchronize
            access to the <see cref="T:SiteCollection"/>.
            </value>
            <remarks>Please refer to <see cref="P:System.Collections.ArrayList.SyncRoot"/> for details.</remarks>
        </member>
        <member name="M:SiteCollection.Add(Site)">
            <summary>
            Adds a <see cref="T:Site"/> to the end of the <see cref="T:SiteCollection"/>.
            </summary>
            <param name="value">The <see cref="T:Site"/> object
            to be added to the end of the <see cref="T:SiteCollection"/>.
            This argument can be a null reference.
            </param>
            <returns>The <see cref="T:SiteCollection"/> index at which the
            <paramref name="value"/> has been added.</returns>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:SiteCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>SiteCollection</b> has a fixed size.</para>
            <para>-or-</para>
            <para>The <b>SiteCollection</b> already contains the specified
            <paramref name="value"/>, and the <b>SiteCollection</b>
            ensures that all elements are unique.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Add(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:SiteCollection.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an <see cref="T:System.Object"/> to the end of the <see cref="T:SiteCollection"/>.
            </summary>
            <param name="value">
            The object to be added to the end of the <see cref="T:SiteCollection"/>.
            This argument must be compatible with <see cref="T:Site"/>.
            This argument can be a null reference.
            </param>
            <returns>The <see cref="T:SiteCollection"/> index at which the
            <paramref name="value"/> has been added.</returns>
            <exception cref="T:System.InvalidCastException"><paramref name="value"/>
            is not compatible with <see cref="T:Site"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:SiteCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>SiteCollection</b> has a fixed size.</para>
            <para>-or-</para>
            <para>The <b>SiteCollection</b> already contains the specified
            <paramref name="value"/>, and the <b>SiteCollection</b>
            ensures that all elements are unique.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Add(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:SiteCollection.AddRange(SiteCollection)">
            <overloads>
            Adds a range of elements to the end of the <see cref="T:SiteCollection"/>.
            </overloads>
            <summary>
            Adds the elements of another collection to the end of the <see cref="T:SiteCollection"/>.
            </summary>
            <param name="collection">The <see cref="T:SiteCollection"/> whose elements
            should be added to the end of the current collection.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is a null reference.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:SiteCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>SiteCollection</b> has a fixed size.</para>
            <para>-or-</para>
            <para>The <b>SiteCollection</b> already contains one or more elements
            in the specified <paramref name="collection"/>, and the <b>SiteCollection</b>
            ensures that all elements are unique.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)"/> for details.</remarks>
        </member>
        <member name="M:SiteCollection.AddRange(Site[])">
            <summary>
            Adds the elements of a <see cref="T:Site"/> array
            to the end of the <see cref="T:SiteCollection"/>.
            </summary>
            <param name="array">An <see cref="T:System.Array"/> of <see cref="T:Site"/> elements
            that should be added to the end of the <see cref="T:SiteCollection"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:SiteCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>SiteCollection</b> has a fixed size.</para>
            <para>-or-</para>
            <para>The <b>SiteCollection</b> already contains one or more elements
            in the specified <paramref name="array"/>, and the <b>SiteCollection</b>
            ensures that all elements are unique.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)"/> for details.</remarks>
        </member>
        <member name="M:SiteCollection.BinarySearch(Site)">
            <summary>
            Searches the entire sorted <see cref="T:SiteCollection"/> for an
            <see cref="T:Site"/> element using the default comparer
            and returns the zero-based index of the element.
            </summary>
            <param name="value">The <see cref="T:Site"/> object
            to locate in the <see cref="T:SiteCollection"/>.
            This argument can be a null reference.
            </param>
            <returns>The zero-based index of <paramref name="value"/> in the sorted
            <see cref="T:SiteCollection"/>, if <paramref name="value"/> is found;
            otherwise, a negative number, which is the bitwise complement of the index
            of the next element that is larger than <paramref name="value"/> or, if there
            is no larger element, the bitwise complement of <see cref="P:SiteCollection.Count"/>.</returns>
            <exception cref="T:System.InvalidOperationException">
            Neither <paramref name="value"/> nor the elements of the <see cref="T:SiteCollection"/>
            implement the <see cref="T:System.IComparable"/> interface.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)"/> for details.</remarks>
        </member>
        <member name="M:SiteCollection.Clear">
            <summary>
            Removes all elements from the <see cref="T:SiteCollection"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:SiteCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>SiteCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Clear"/> for details.</remarks>
        </member>
        <member name="M:SiteCollection.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:SiteCollection"/>.
            </summary>
            <returns>A shallow copy of the <see cref="T:SiteCollection"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Clone"/> for details.</remarks>
        </member>
        <member name="M:SiteCollection.Contains(Site)">
            <summary>
            Determines whether the <see cref="T:SiteCollection"/>
            contains the specified <see cref="T:Site"/> element.
            </summary>
            <param name="value">The <see cref="T:Site"/> object
            to locate in the <see cref="T:SiteCollection"/>.
            This argument can be a null reference.
            </param>
            <returns><c>true</c> if <paramref name="value"/> is found in the
            <see cref="T:SiteCollection"/>; otherwise, <c>false</c>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Contains(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:SiteCollection.System#Collections#IList#Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:SiteCollection"/> contains the specified element.
            </summary>
            <param name="value">The object to locate in the <see cref="T:SiteCollection"/>.
            This argument must be compatible with <see cref="T:Site"/>.
            This argument can be a null reference.
            </param>
            <returns><c>true</c> if <paramref name="value"/> is found in the
            <see cref="T:SiteCollection"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.InvalidCastException"><paramref name="value"/>
            is not compatible with <see cref="T:Site"/>.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Contains(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:SiteCollection.CopyTo(Site[])">
            <overloads>
            Copies the <see cref="T:SiteCollection"/> or a portion of it to a one-dimensional array.
            </overloads>
            <summary>
            Copies the entire <see cref="T:SiteCollection"/> to a one-dimensional <see cref="T:System.Array"/>
            of <see cref="T:Site"/> elements, starting at the beginning of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the
            <see cref="T:Site"/> elements copied from the <see cref="T:SiteCollection"/>.
            The <b>Array</b> must have zero-based indexing.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException">
            The number of elements in the source <see cref="T:SiteCollection"/> is greater
            than the available space in the destination <paramref name="array"/>.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.CopyTo(System.Array)"/> for details.</remarks>
        </member>
        <member name="M:SiteCollection.CopyTo(Site[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:SiteCollection"/> to a one-dimensional <see cref="T:System.Array"/>
            of <see cref="T:Site"/> elements, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the
            <see cref="T:Site"/> elements copied from the <see cref="T:SiteCollection"/>.
            The <b>Array</b> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/>
            at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <see cref="T:SiteCollection"/> is greater than the
            available space from <paramref name="arrayIndex"/> to the end of the destination
            <paramref name="array"/>.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.CopyTo(System.Array)"/> for details.</remarks>
        </member>
        <member name="M:SiteCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the entire <see cref="T:SiteCollection"/> to a one-dimensional <see cref="T:System.Array"/>,
            starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the
            <see cref="T:Site"/> elements copied from the <see cref="T:SiteCollection"/>.
            The <b>Array</b> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/>
            at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="array"/> is multidimensional.
            </para><para>-or-</para><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <see cref="T:SiteCollection"/> is greater than the
            available space from <paramref name="arrayIndex"/> to the end of the destination
            <paramref name="array"/>.</para></exception>
            <exception cref="T:System.InvalidCastException">
            The <see cref="T:Site"/> type cannot be cast automatically
            to the type of the destination <paramref name="array"/>.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.CopyTo(System.Array)"/> for details.</remarks>
        </member>
        <member name="M:SiteCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:ISiteEnumerator"/> that can
            iterate through the <see cref="T:SiteCollection"/>.
            </summary>
            <returns>An <see cref="T:ISiteEnumerator"/>
            for the entire <see cref="T:SiteCollection"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.GetEnumerator"/> for details.</remarks>
        </member>
        <member name="M:SiteCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/> that can
            iterate through the <see cref="T:SiteCollection"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/>
            for the entire <see cref="T:SiteCollection"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.GetEnumerator"/> for details.</remarks>
        </member>
        <member name="M:SiteCollection.IndexOf(Site)">
            <summary>
            Returns the zero-based index of the first occurrence of the specified
            <see cref="T:Site"/> in the <see cref="T:SiteCollection"/>.
            </summary>
            <param name="value">The <see cref="T:Site"/> object
            to locate in the <see cref="T:SiteCollection"/>.
            This argument can be a null reference.
            </param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="value"/>
            in the <see cref="T:SiteCollection"/>, if found; otherwise, -1.
            </returns>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.IndexOf(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:SiteCollection.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Returns the zero-based index of the first occurrence of the specified
            <see cref="T:System.Object"/> in the <see cref="T:SiteCollection"/>.
            </summary>
            <param name="value">The object to locate in the <see cref="T:SiteCollection"/>.
            This argument must be compatible with <see cref="T:Site"/>.
            This argument can be a null reference.
            </param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="value"/>
            in the <see cref="T:SiteCollection"/>, if found; otherwise, -1.
            </returns>
            <exception cref="T:System.InvalidCastException"><paramref name="value"/>
            is not compatible with <see cref="T:Site"/>.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.IndexOf(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:SiteCollection.Insert(System.Int32,Site)">
            <summary>
            Inserts a <see cref="T:Site"/> element into the
            <see cref="T:SiteCollection"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="value"/>
            should be inserted.</param>
            <param name="value">The <see cref="T:Site"/> object
            to insert into the <see cref="T:SiteCollection"/>.
            This argument can be a null reference.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is greater than <see cref="P:SiteCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:SiteCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>SiteCollection</b> has a fixed size.</para>
            <para>-or-</para>
            <para>The <b>SiteCollection</b> already contains the specified
            <paramref name="value"/>, and the <b>SiteCollection</b>
            ensures that all elements are unique.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Insert(System.Int32,System.Object)"/> for details.</remarks>
        </member>
        <member name="M:SiteCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts an element into the <see cref="T:SiteCollection"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="value"/>
            should be inserted.</param>
            <param name="value">The object to insert into the <see cref="T:SiteCollection"/>.
            This argument must be compatible with <see cref="T:Site"/>.
            This argument can be a null reference.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is greater than <see cref="P:SiteCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.InvalidCastException"><paramref name="value"/>
            is not compatible with <see cref="T:Site"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:SiteCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>SiteCollection</b> has a fixed size.</para>
            <para>-or-</para>
            <para>The <b>SiteCollection</b> already contains the specified
            <paramref name="value"/>, and the <b>SiteCollection</b>
            ensures that all elements are unique.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Insert(System.Int32,System.Object)"/> for details.</remarks>
        </member>
        <member name="M:SiteCollection.ReadOnly(SiteCollection)">
            <summary>
            Returns a read-only wrapper for the specified <see cref="T:SiteCollection"/>.
            </summary>
            <param name="collection">The <see cref="T:SiteCollection"/> to wrap.</param>
            <returns>A read-only wrapper around <paramref name="collection"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is a null reference.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.ReadOnly(System.Collections.IList)"/> for details.</remarks>
        </member>
        <member name="M:SiteCollection.Remove(Site)">
            <summary>
            Removes the first occurrence of the specified <see cref="T:Site"/>
            from the <see cref="T:SiteCollection"/>.
            </summary>
            <param name="value">The <see cref="T:Site"/> object
            to remove from the <see cref="T:SiteCollection"/>.
            This argument can be a null reference.
            </param>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:SiteCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>SiteCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Remove(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:SiteCollection.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the first occurrence of the specified <see cref="T:System.Object"/>
            from the <see cref="T:SiteCollection"/>.
            </summary>
            <param name="value">The object to remove from the <see cref="T:SiteCollection"/>.
            This argument must be compatible with <see cref="T:Site"/>.
            This argument can be a null reference.
            </param>
            <exception cref="T:System.InvalidCastException"><paramref name="value"/>
            is not compatible with <see cref="T:Site"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:SiteCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>SiteCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Remove(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:SiteCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:SiteCollection"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than <see cref="P:SiteCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:SiteCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>SiteCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.RemoveAt(System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:SiteCollection.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes the specified range of elements from the <see cref="T:SiteCollection"/>.
            </summary>
            <param name="index">The zero-based starting index of the range
            of elements to remove.</param>
            <param name="count">The number of elements to remove.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> and <paramref name="count"/> do not denote a
            valid range of elements in the <see cref="T:SiteCollection"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="count"/> is less than zero.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:SiteCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>SiteCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:SiteCollection.Reverse">
            <overloads>
            Reverses the order of the elements in the 
            <see cref="T:SiteCollection"/> or a portion of it.
            </overloads>
            <summary>
            Reverses the order of the elements in the entire <see cref="T:SiteCollection"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:SiteCollection"/> is read-only.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Reverse"/> for details.</remarks>
        </member>
        <member name="M:SiteCollection.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverses the order of the elements in the specified range.
            </summary>
            <param name="index">The zero-based starting index of the range
            of elements to reverse.</param>
            <param name="count">The number of elements to reverse.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> and <paramref name="count"/> do not denote a
            valid range of elements in the <see cref="T:SiteCollection"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="count"/> is less than zero.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:SiteCollection"/> is read-only.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Reverse"/> for details.</remarks>
        </member>
        <member name="M:SiteCollection.Sort">
            <overloads>
            Sorts the elements in the <see cref="T:SiteCollection"/> or a portion of it.
            </overloads>
            <summary>
            Sorts the elements in the entire <see cref="T:SiteCollection"/>
            using the <see cref="T:System.IComparable"/> implementation of each element.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:SiteCollection"/> is read-only.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Sort"/> for details.</remarks>
        </member>
        <member name="M:SiteCollection.Sort(System.Collections.IComparer)">
            <summary>
            Sorts the elements in the entire <see cref="T:SiteCollection"/>
            using the specified <see cref="T:System.Collections.IComparer"/> interface.
            </summary>
            <param name="comparer">
            <para>The <see cref="T:System.Collections.IComparer"/> implementation to use when comparing elements.</para>
            <para>-or-</para>
            <para>A null reference to use the <see cref="T:System.IComparable"/> implementation 
            of each element.</para></param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:SiteCollection"/> is read-only.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Sort"/> for details.</remarks>
        </member>
        <member name="M:SiteCollection.Sort(System.Int32,System.Int32,System.Collections.IComparer)">
            <summary>
            Sorts the elements in the specified range 
            using the specified <see cref="T:System.Collections.IComparer"/> interface.
            </summary>
            <param name="index">The zero-based starting index of the range
            of elements to sort.</param>
            <param name="count">The number of elements to sort.</param>
            <param name="comparer">
            <para>The <see cref="T:System.Collections.IComparer"/> implementation to use when comparing elements.</para>
            <para>-or-</para>
            <para>A null reference to use the <see cref="T:System.IComparable"/> implementation 
            of each element.</para></param>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> and <paramref name="count"/> do not denote a
            valid range of elements in the <see cref="T:SiteCollection"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="count"/> is less than zero.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:SiteCollection"/> is read-only.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Sort"/> for details.</remarks>
        </member>
        <member name="M:SiteCollection.Synchronized(SiteCollection)">
            <summary>
            Returns a synchronized (thread-safe) wrapper
            for the specified <see cref="T:SiteCollection"/>.
            </summary>
            <param name="collection">The <see cref="T:SiteCollection"/> to synchronize.</param>
            <returns>
            A synchronized (thread-safe) wrapper around <paramref name="collection"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is a null reference.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Synchronized(System.Collections.IList)"/> for details.</remarks>
        </member>
        <member name="M:SiteCollection.ToArray">
            <summary>
            Copies the elements of the <see cref="T:SiteCollection"/> to a new
            <see cref="T:System.Array"/> of <see cref="T:Site"/> elements.
            </summary>
            <returns>A one-dimensional <see cref="T:System.Array"/> of <see cref="T:Site"/>
            elements containing copies of the elements of the <see cref="T:SiteCollection"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.ToArray"/> for details.</remarks>
        </member>
        <member name="M:SiteCollection.TrimToSize">
            <summary>
            Sets the capacity to the actual number of elements in the <see cref="T:SiteCollection"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:SiteCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>SiteCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.TrimToSize"/> for details.</remarks>
        </member>
        <member name="M:SiteCollection.Unique(SiteCollection)">
            <summary>
            Returns a wrapper for the specified <see cref="T:SiteCollection"/>
            ensuring that all elements are unique.
            </summary>
            <param name="collection">The <see cref="T:SiteCollection"/> to wrap.</param>    
            <returns>
            A wrapper around <paramref name="collection"/> ensuring that all elements are unique.
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="collection"/> contains duplicate elements.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is a null reference.</exception>
            <remarks><para>
            The <b>Unique</b> wrapper provides a set-like collection by ensuring
            that all elements in the <see cref="T:SiteCollection"/> are unique.
            </para><para>
            <b>Unique</b> raises an <see cref="T:System.ArgumentException"/> if the specified 
            <paramref name="collection"/> contains any duplicate elements. The returned
            wrapper raises a <see cref="T:System.NotSupportedException"/> whenever the user attempts 
            to add an element that is already contained in the <b>SiteCollection</b>.
            </para><para>
            <strong>Note:</strong> The <b>Unique</b> wrapper reflects any changes made
            to the underlying <paramref name="collection"/>, including the possible
            creation of duplicate elements. The uniqueness of all elements is therefore
            no longer assured if the underlying collection is manipulated directly.
            </para></remarks>
        </member>
        <member name="T:Track">
            <summary>
            Summary description for Track.
            </summary>
        </member>
        <member name="P:Track.ExtendedData">
            <summary>
            Property ExtendedData (string)
            </summary>
        </member>
        <member name="P:Track.Title">
            <summary>
            Property Title (string)
            </summary>
        </member>
        <member name="M:Track.#ctor">
            <summary>
            Create an instance of a Track 
            </summary>
            <param name="title"></param>
        </member>
        <member name="M:Track.#ctor(System.String)">
            <summary>
            Create an instance of a Track passing in a title
            </summary>
            <param name="title"></param>
        </member>
        <member name="M:Track.#ctor(System.String,System.String)">
            <summary>
            Create an instance of a Track passing in a title and extended data
            </summary>
            <param name="title"></param>
        </member>
        <member name="T:ITrackCollection">
            <summary>
            Defines size, enumerators, and synchronization methods for strongly
            typed collections of <see cref="T:Track"/> elements.
            </summary>
            <remarks>
            <b>ITrackCollection</b> provides an <see cref="T:System.Collections.ICollection"/>
            that is strongly typed for <see cref="T:Track"/> elements.
            </remarks>
        </member>
        <member name="P:ITrackCollection.Count">
            <summary>
            Gets the number of elements contained in the
            <see cref="T:ITrackCollection"/>.
            </summary>
            <value>The number of elements contained in the
            <see cref="T:ITrackCollection"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ICollection.Count"/> for details.</remarks>
        </member>
        <member name="P:ITrackCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the
            <see cref="T:ITrackCollection"/> is synchronized (thread-safe).
            </summary>
            <value><c>true</c> if access to the <see cref="T:ITrackCollection"/> is
            synchronized (thread-safe); otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ICollection.IsSynchronized"/> for details.</remarks>
        </member>
        <member name="P:ITrackCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access
            to the <see cref="T:ITrackCollection"/>.
            </summary>
            <value>An object that can be used to synchronize access
            to the <see cref="T:ITrackCollection"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ICollection.SyncRoot"/> for details.</remarks>
        </member>
        <member name="M:ITrackCollection.CopyTo(Track[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:ITrackCollection"/> to a one-dimensional <see cref="T:System.Array"/>
            of <see cref="T:Track"/> elements, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the
            <see cref="T:Track"/> elements copied from the <see cref="T:ITrackCollection"/>.
            The <b>Array</b> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/>
            at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <see cref="T:ITrackCollection"/> is greater
            than the available space from <paramref name="arrayIndex"/> to the end of the destination
            <paramref name="array"/>.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:ITrackCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:ITrackEnumerator"/> that can
            iterate through the <see cref="T:ITrackCollection"/>.
            </summary>
            <returns>An <see cref="T:ITrackEnumerator"/>
            for the entire <see cref="T:ITrackCollection"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.IEnumerable.GetEnumerator"/> for details.</remarks>
        </member>
        <member name="T:ITrackList">
            <summary>
            Represents a strongly typed collection of <see cref="T:Track"/>
            objects that can be individually accessed by index.
            </summary>
            <remarks>
            <b>ITrackList</b> provides an <see cref="T:System.Collections.IList"/>
            that is strongly typed for <see cref="T:Track"/> elements.
            </remarks>
        </member>
        <member name="P:ITrackList.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:ITrackList"/> has a fixed size.
            </summary>
            <value><c>true</c> if the <see cref="T:ITrackList"/> has a fixed size;
            otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.IList.IsFixedSize"/> for details.</remarks>
        </member>
        <member name="P:ITrackList.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:ITrackList"/> is read-only.
            </summary>
            <value><c>true</c> if the <see cref="T:ITrackList"/> is read-only;
            otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.IList.IsReadOnly"/> for details.</remarks>
        </member>
        <member name="P:ITrackList.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Track"/> element at the specified index.
            </summary>
            <param name="index">The zero-based index of the
            <see cref="T:Track"/> element to get or set.</param>
            <value>
            The <see cref="T:Track"/> element at the specified <paramref name="index"/>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than
            <see cref="P:ITrackCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The property is set and the <see cref="T:ITrackList"/> is read-only.</exception>
            <remarks>Please refer to <see cref="P:System.Collections.IList.Item(System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:ITrackList.Add(Track)">
            <summary>
            Adds a <see cref="T:Track"/> to the end
            of the <see cref="T:ITrackList"/>.
            </summary>
            <param name="value">The <see cref="T:Track"/> object
            to be added to the end of the <see cref="T:ITrackList"/>.
            This argument can be a null reference.
            </param>
            <returns>The <see cref="T:ITrackList"/> index at which
            the <paramref name="value"/> has been added.</returns>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:ITrackList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>ITrackList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Add(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:ITrackList.Clear">
            <summary>
            Removes all elements from the <see cref="T:ITrackList"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:ITrackList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>ITrackList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Clear"/> for details.</remarks>
        </member>
        <member name="M:ITrackList.Contains(Track)">
            <summary>
            Determines whether the <see cref="T:ITrackList"/>
            contains the specified <see cref="T:Track"/> element.
            </summary>
            <param name="value">The <see cref="T:Track"/> object
            to locate in the <see cref="T:ITrackList"/>.
            This argument can be a null reference.
            </param>
            <returns><c>true</c> if <paramref name="value"/> is found in the
            <see cref="T:ITrackList"/>; otherwise, <c>false</c>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Contains(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:ITrackList.IndexOf(Track)">
            <summary>
            Returns the zero-based index of the first occurrence of the specified
            <see cref="T:Track"/> in the <see cref="T:ITrackList"/>.
            </summary>
            <param name="value">The <see cref="T:Track"/> object
            to locate in the <see cref="T:ITrackList"/>.
            This argument can be a null reference.
            </param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="value"/>
            in the <see cref="T:ITrackList"/>, if found; otherwise, -1.
            </returns>
            <remarks>Please refer to <see cref="M:System.Collections.IList.IndexOf(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:ITrackList.Insert(System.Int32,Track)">
            <summary>
            Inserts a <see cref="T:Track"/> element into the
            <see cref="T:ITrackList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which
            <paramref name="value"/> should be inserted.</param>
            <param name="value">The <see cref="T:Track"/> object
            to insert into the <see cref="T:ITrackList"/>.
            This argument can be a null reference.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is greater than
            <see cref="P:ITrackCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:ITrackList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>ITrackList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)"/> for details.</remarks>
        </member>
        <member name="M:ITrackList.Remove(Track)">
            <summary>
            Removes the first occurrence of the specified <see cref="T:Track"/>
            from the <see cref="T:ITrackList"/>.
            </summary>
            <param name="value">The <see cref="T:Track"/> object
            to remove from the <see cref="T:ITrackList"/>.
            This argument can be a null reference.
            </param>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:ITrackList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>ITrackList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Remove(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:ITrackList.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the
            <see cref="T:ITrackList"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than
            <see cref="P:ITrackCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:ITrackList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>ITrackList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.RemoveAt(System.Int32)"/> for details.</remarks>
        </member>
        <member name="T:ITrackEnumerator">
            <summary>
            Supports type-safe iteration over a collection that
            contains <see cref="T:Track"/> elements.
            </summary>
            <remarks>
            <b>ITrackEnumerator</b> provides an <see cref="T:System.Collections.IEnumerator"/>
            that is strongly typed for <see cref="T:Track"/> elements.
            </remarks>
        </member>
        <member name="P:ITrackEnumerator.Current">
            <summary>
            Gets the current <see cref="T:Track"/> element in the collection.
            </summary>
            <value>The current <see cref="T:Track"/> element in the collection.</value>
            <exception cref="T:System.InvalidOperationException"><para>The enumerator is positioned
            before the first element of the collection or after the last element.</para>
            <para>-or-</para>
            <para>The collection was modified after the enumerator was created.</para></exception>
            <remarks>Please refer to <see cref="P:System.Collections.IEnumerator.Current"/> for details, but note
            that <b>Current</b> fails if the collection was modified since the last successful
            call to <see cref="M:ITrackEnumerator.MoveNext"/> or <see cref="M:ITrackEnumerator.Reset"/>.</remarks>
        </member>
        <member name="M:ITrackEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns><c>true</c> if the enumerator was successfully advanced to the next element;
            <c>false</c> if the enumerator has passed the end of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.IEnumerator.MoveNext"/> for details.</remarks>
        </member>
        <member name="M:ITrackEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position,
            which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.IEnumerator.Reset"/> for details.</remarks>
        </member>
        <member name="T:TrackCollection">
            <summary>
            Implements a strongly typed collection of <see cref="T:Track"/> elements.
            </summary>
            <remarks><para>
            <b>TrackCollection</b> provides an <see cref="T:System.Collections.ArrayList"/>
            that is strongly typed for <see cref="T:Track"/> elements.
            </para></remarks>
        </member>
        <member name="M:TrackCollection.#ctor">
            <overloads>
            Initializes a new instance of the <see cref="T:TrackCollection"/> class.
            </overloads>
            <summary>
            Initializes a new instance of the <see cref="T:TrackCollection"/> class
            that is empty and has the default initial capacity.
            </summary>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.#ctor"/> for details.</remarks>
        </member>
        <member name="M:TrackCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TrackCollection"/> class
            that is empty and has the specified initial capacity.
            </summary>
            <param name="capacity">The number of elements that the new
            <see cref="T:TrackCollection"/> is initially capable of storing.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity"/> is less than zero.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.#ctor(System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:TrackCollection.#ctor(TrackCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:TrackCollection"/> class
            that contains elements copied from the specified collection and
            that has the same initial capacity as the number of elements copied.
            </summary>
            <param name="collection">The <see cref="T:TrackCollection"/>
            whose elements are copied to the new collection.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is a null reference.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.#ctor(System.Collections.ICollection)"/> for details.</remarks>
        </member>
        <member name="M:TrackCollection.#ctor(Track[])">
            <summary>
            Initializes a new instance of the <see cref="T:TrackCollection"/> class
            that contains elements copied from the specified <see cref="T:Track"/>
            array and that has the same initial capacity as the number of elements copied.
            </summary>
            <param name="array">An <see cref="T:System.Array"/> of <see cref="T:Track"/>
            elements that are copied to the new collection.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.#ctor(System.Collections.ICollection)"/> for details.</remarks>
        </member>
        <member name="P:TrackCollection.InnerArray">
            <summary>
            Gets the list of elements contained in the <see cref="T:TrackCollection"/> instance.
            </summary>
            <value>
            A one-dimensional <see cref="T:System.Array"/> with zero-based indexing that contains all 
            <see cref="T:Track"/> elements in the <see cref="T:TrackCollection"/>.
            </value>
            <remarks>
            Use <b>InnerArray</b> to access the element array of a <see cref="T:TrackCollection"/>
            instance that might be a read-only or synchronized wrapper. This is necessary because
            the element array field of wrapper classes is always a null reference.
            </remarks>
        </member>
        <member name="P:TrackCollection.Capacity">
            <summary>
            Gets or sets the capacity of the <see cref="T:TrackCollection"/>.
            </summary>
            <value>The number of elements that the
            <see cref="T:TrackCollection"/> can contain.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <b>Capacity</b> is set to a value that is less than <see cref="P:TrackCollection.Count"/>.</exception>
            <remarks>Please refer to <see cref="P:System.Collections.ArrayList.Capacity"/> for details.</remarks>
        </member>
        <member name="P:TrackCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:TrackCollection"/>.
            </summary>
            <value>
            The number of elements contained in the <see cref="T:TrackCollection"/>.
            </value>
            <remarks>Please refer to <see cref="P:System.Collections.ArrayList.Count"/> for details.</remarks>
        </member>
        <member name="P:TrackCollection.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:TrackCollection"/> has a fixed size.
            </summary>
            <value><c>true</c> if the <see cref="T:TrackCollection"/> has a fixed size;
            otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ArrayList.IsFixedSize"/> for details.</remarks>
        </member>
        <member name="P:TrackCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:TrackCollection"/> is read-only.
            </summary>
            <value><c>true</c> if the <see cref="T:TrackCollection"/> is read-only;
            otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ArrayList.IsReadOnly"/> for details.</remarks>
        </member>
        <member name="P:TrackCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:TrackCollection"/>
            is synchronized (thread-safe).
            </summary>
            <value><c>true</c> if access to the <see cref="T:TrackCollection"/> is
            synchronized (thread-safe); otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ArrayList.IsSynchronized"/> for details.</remarks>
        </member>
        <member name="P:TrackCollection.IsUnique">
            <summary>
            Gets a value indicating whether the <see cref="T:TrackCollection"/> 
            ensures that all elements are unique.
            </summary>
            <value>
            <c>true</c> if the <see cref="T:TrackCollection"/> ensures that all 
            elements are unique; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
            <remarks>
            <b>IsUnique</b> returns <c>true</c> exactly if the <see cref="T:TrackCollection"/>
            is exposed through a <see cref="M:TrackCollection.Unique(TrackCollection)"/> wrapper. 
            Please refer to <see cref="M:TrackCollection.Unique(TrackCollection)"/> for details.
            </remarks>
        </member>
        <member name="P:TrackCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Track"/> element at the specified index.
            </summary>
            <param name="index">The zero-based index of the
            <see cref="T:Track"/> element to get or set.</param>
            <value>
            The <see cref="T:Track"/> element at the specified <paramref name="index"/>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than <see cref="P:TrackCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException"><para>
            The property is set and the <see cref="T:TrackCollection"/> is read-only.
            </para><para>-or-</para><para>
            The property is set, the <b>TrackCollection</b> already contains the
            specified element at a different index, and the <b>TrackCollection</b>
            ensures that all elements are unique.</para></exception>
            <remarks>Please refer to <see cref="P:System.Collections.ArrayList.Item(System.Int32)"/> for details.</remarks>
        </member>
        <member name="P:TrackCollection.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <value>
            The element at the specified <paramref name="index"/>. When the property
            is set, this value must be compatible with <see cref="T:Track"/>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than <see cref="P:TrackCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.InvalidCastException">The property is set to a value
            that is not compatible with <see cref="T:Track"/>.</exception>
            <exception cref="T:System.NotSupportedException"><para>
            The property is set and the <see cref="T:TrackCollection"/> is read-only.
            </para><para>-or-</para><para>
            The property is set, the <b>TrackCollection</b> already contains the
            specified element at a different index, and the <b>TrackCollection</b>
            ensures that all elements are unique.</para></exception>
            <remarks>Please refer to <see cref="P:System.Collections.ArrayList.Item(System.Int32)"/> for details.</remarks>
        </member>
        <member name="P:TrackCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize
            access to the <see cref="T:TrackCollection"/>.
            </summary>
            <value>An object that can be used to synchronize
            access to the <see cref="T:TrackCollection"/>.
            </value>
            <remarks>Please refer to <see cref="P:System.Collections.ArrayList.SyncRoot"/> for details.</remarks>
        </member>
        <member name="M:TrackCollection.Add(Track)">
            <summary>
            Adds a <see cref="T:Track"/> to the end of the <see cref="T:TrackCollection"/>.
            </summary>
            <param name="value">The <see cref="T:Track"/> object
            to be added to the end of the <see cref="T:TrackCollection"/>.
            This argument can be a null reference.
            </param>
            <returns>The <see cref="T:TrackCollection"/> index at which the
            <paramref name="value"/> has been added.</returns>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:TrackCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>TrackCollection</b> has a fixed size.</para>
            <para>-or-</para>
            <para>The <b>TrackCollection</b> already contains the specified
            <paramref name="value"/>, and the <b>TrackCollection</b>
            ensures that all elements are unique.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Add(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:TrackCollection.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an <see cref="T:System.Object"/> to the end of the <see cref="T:TrackCollection"/>.
            </summary>
            <param name="value">
            The object to be added to the end of the <see cref="T:TrackCollection"/>.
            This argument must be compatible with <see cref="T:Track"/>.
            This argument can be a null reference.
            </param>
            <returns>The <see cref="T:TrackCollection"/> index at which the
            <paramref name="value"/> has been added.</returns>
            <exception cref="T:System.InvalidCastException"><paramref name="value"/>
            is not compatible with <see cref="T:Track"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:TrackCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>TrackCollection</b> has a fixed size.</para>
            <para>-or-</para>
            <para>The <b>TrackCollection</b> already contains the specified
            <paramref name="value"/>, and the <b>TrackCollection</b>
            ensures that all elements are unique.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Add(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:TrackCollection.AddRange(TrackCollection)">
            <overloads>
            Adds a range of elements to the end of the <see cref="T:TrackCollection"/>.
            </overloads>
            <summary>
            Adds the elements of another collection to the end of the <see cref="T:TrackCollection"/>.
            </summary>
            <param name="collection">The <see cref="T:TrackCollection"/> whose elements
            should be added to the end of the current collection.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is a null reference.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:TrackCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>TrackCollection</b> has a fixed size.</para>
            <para>-or-</para>
            <para>The <b>TrackCollection</b> already contains one or more elements
            in the specified <paramref name="collection"/>, and the <b>TrackCollection</b>
            ensures that all elements are unique.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)"/> for details.</remarks>
        </member>
        <member name="M:TrackCollection.AddRange(Track[])">
            <summary>
            Adds the elements of a <see cref="T:Track"/> array
            to the end of the <see cref="T:TrackCollection"/>.
            </summary>
            <param name="array">An <see cref="T:System.Array"/> of <see cref="T:Track"/> elements
            that should be added to the end of the <see cref="T:TrackCollection"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:TrackCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>TrackCollection</b> has a fixed size.</para>
            <para>-or-</para>
            <para>The <b>TrackCollection</b> already contains one or more elements
            in the specified <paramref name="array"/>, and the <b>TrackCollection</b>
            ensures that all elements are unique.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)"/> for details.</remarks>
        </member>
        <member name="M:TrackCollection.BinarySearch(Track)">
            <summary>
            Searches the entire sorted <see cref="T:TrackCollection"/> for an
            <see cref="T:Track"/> element using the default comparer
            and returns the zero-based index of the element.
            </summary>
            <param name="value">The <see cref="T:Track"/> object
            to locate in the <see cref="T:TrackCollection"/>.
            This argument can be a null reference.
            </param>
            <returns>The zero-based index of <paramref name="value"/> in the sorted
            <see cref="T:TrackCollection"/>, if <paramref name="value"/> is found;
            otherwise, a negative number, which is the bitwise complement of the index
            of the next element that is larger than <paramref name="value"/> or, if there
            is no larger element, the bitwise complement of <see cref="P:TrackCollection.Count"/>.</returns>
            <exception cref="T:System.InvalidOperationException">
            Neither <paramref name="value"/> nor the elements of the <see cref="T:TrackCollection"/>
            implement the <see cref="T:System.IComparable"/> interface.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)"/> for details.</remarks>
        </member>
        <member name="M:TrackCollection.Clear">
            <summary>
            Removes all elements from the <see cref="T:TrackCollection"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:TrackCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>TrackCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Clear"/> for details.</remarks>
        </member>
        <member name="M:TrackCollection.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:TrackCollection"/>.
            </summary>
            <returns>A shallow copy of the <see cref="T:TrackCollection"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Clone"/> for details.</remarks>
        </member>
        <member name="M:TrackCollection.Contains(Track)">
            <summary>
            Determines whether the <see cref="T:TrackCollection"/>
            contains the specified <see cref="T:Track"/> element.
            </summary>
            <param name="value">The <see cref="T:Track"/> object
            to locate in the <see cref="T:TrackCollection"/>.
            This argument can be a null reference.
            </param>
            <returns><c>true</c> if <paramref name="value"/> is found in the
            <see cref="T:TrackCollection"/>; otherwise, <c>false</c>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Contains(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:TrackCollection.System#Collections#IList#Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:TrackCollection"/> contains the specified element.
            </summary>
            <param name="value">The object to locate in the <see cref="T:TrackCollection"/>.
            This argument must be compatible with <see cref="T:Track"/>.
            This argument can be a null reference.
            </param>
            <returns><c>true</c> if <paramref name="value"/> is found in the
            <see cref="T:TrackCollection"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.InvalidCastException"><paramref name="value"/>
            is not compatible with <see cref="T:Track"/>.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Contains(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:TrackCollection.CopyTo(Track[])">
            <overloads>
            Copies the <see cref="T:TrackCollection"/> or a portion of it to a one-dimensional array.
            </overloads>
            <summary>
            Copies the entire <see cref="T:TrackCollection"/> to a one-dimensional <see cref="T:System.Array"/>
            of <see cref="T:Track"/> elements, starting at the beginning of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the
            <see cref="T:Track"/> elements copied from the <see cref="T:TrackCollection"/>.
            The <b>Array</b> must have zero-based indexing.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException">
            The number of elements in the source <see cref="T:TrackCollection"/> is greater
            than the available space in the destination <paramref name="array"/>.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.CopyTo(System.Array)"/> for details.</remarks>
        </member>
        <member name="M:TrackCollection.CopyTo(Track[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:TrackCollection"/> to a one-dimensional <see cref="T:System.Array"/>
            of <see cref="T:Track"/> elements, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the
            <see cref="T:Track"/> elements copied from the <see cref="T:TrackCollection"/>.
            The <b>Array</b> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/>
            at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <see cref="T:TrackCollection"/> is greater than the
            available space from <paramref name="arrayIndex"/> to the end of the destination
            <paramref name="array"/>.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.CopyTo(System.Array)"/> for details.</remarks>
        </member>
        <member name="M:TrackCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the entire <see cref="T:TrackCollection"/> to a one-dimensional <see cref="T:System.Array"/>,
            starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the
            <see cref="T:Track"/> elements copied from the <see cref="T:TrackCollection"/>.
            The <b>Array</b> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/>
            at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="array"/> is multidimensional.
            </para><para>-or-</para><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <see cref="T:TrackCollection"/> is greater than the
            available space from <paramref name="arrayIndex"/> to the end of the destination
            <paramref name="array"/>.</para></exception>
            <exception cref="T:System.InvalidCastException">
            The <see cref="T:Track"/> type cannot be cast automatically
            to the type of the destination <paramref name="array"/>.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.CopyTo(System.Array)"/> for details.</remarks>
        </member>
        <member name="M:TrackCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:ITrackEnumerator"/> that can
            iterate through the <see cref="T:TrackCollection"/>.
            </summary>
            <returns>An <see cref="T:ITrackEnumerator"/>
            for the entire <see cref="T:TrackCollection"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.GetEnumerator"/> for details.</remarks>
        </member>
        <member name="M:TrackCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/> that can
            iterate through the <see cref="T:TrackCollection"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/>
            for the entire <see cref="T:TrackCollection"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.GetEnumerator"/> for details.</remarks>
        </member>
        <member name="M:TrackCollection.IndexOf(Track)">
            <summary>
            Returns the zero-based index of the first occurrence of the specified
            <see cref="T:Track"/> in the <see cref="T:TrackCollection"/>.
            </summary>
            <param name="value">The <see cref="T:Track"/> object
            to locate in the <see cref="T:TrackCollection"/>.
            This argument can be a null reference.
            </param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="value"/>
            in the <see cref="T:TrackCollection"/>, if found; otherwise, -1.
            </returns>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.IndexOf(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:TrackCollection.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Returns the zero-based index of the first occurrence of the specified
            <see cref="T:System.Object"/> in the <see cref="T:TrackCollection"/>.
            </summary>
            <param name="value">The object to locate in the <see cref="T:TrackCollection"/>.
            This argument must be compatible with <see cref="T:Track"/>.
            This argument can be a null reference.
            </param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="value"/>
            in the <see cref="T:TrackCollection"/>, if found; otherwise, -1.
            </returns>
            <exception cref="T:System.InvalidCastException"><paramref name="value"/>
            is not compatible with <see cref="T:Track"/>.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.IndexOf(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:TrackCollection.Insert(System.Int32,Track)">
            <summary>
            Inserts a <see cref="T:Track"/> element into the
            <see cref="T:TrackCollection"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="value"/>
            should be inserted.</param>
            <param name="value">The <see cref="T:Track"/> object
            to insert into the <see cref="T:TrackCollection"/>.
            This argument can be a null reference.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is greater than <see cref="P:TrackCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:TrackCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>TrackCollection</b> has a fixed size.</para>
            <para>-or-</para>
            <para>The <b>TrackCollection</b> already contains the specified
            <paramref name="value"/>, and the <b>TrackCollection</b>
            ensures that all elements are unique.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Insert(System.Int32,System.Object)"/> for details.</remarks>
        </member>
        <member name="M:TrackCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts an element into the <see cref="T:TrackCollection"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="value"/>
            should be inserted.</param>
            <param name="value">The object to insert into the <see cref="T:TrackCollection"/>.
            This argument must be compatible with <see cref="T:Track"/>.
            This argument can be a null reference.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is greater than <see cref="P:TrackCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.InvalidCastException"><paramref name="value"/>
            is not compatible with <see cref="T:Track"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:TrackCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>TrackCollection</b> has a fixed size.</para>
            <para>-or-</para>
            <para>The <b>TrackCollection</b> already contains the specified
            <paramref name="value"/>, and the <b>TrackCollection</b>
            ensures that all elements are unique.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Insert(System.Int32,System.Object)"/> for details.</remarks>
        </member>
        <member name="M:TrackCollection.ReadOnly(TrackCollection)">
            <summary>
            Returns a read-only wrapper for the specified <see cref="T:TrackCollection"/>.
            </summary>
            <param name="collection">The <see cref="T:TrackCollection"/> to wrap.</param>
            <returns>A read-only wrapper around <paramref name="collection"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is a null reference.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.ReadOnly(System.Collections.IList)"/> for details.</remarks>
        </member>
        <member name="M:TrackCollection.Remove(Track)">
            <summary>
            Removes the first occurrence of the specified <see cref="T:Track"/>
            from the <see cref="T:TrackCollection"/>.
            </summary>
            <param name="value">The <see cref="T:Track"/> object
            to remove from the <see cref="T:TrackCollection"/>.
            This argument can be a null reference.
            </param>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:TrackCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>TrackCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Remove(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:TrackCollection.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the first occurrence of the specified <see cref="T:System.Object"/>
            from the <see cref="T:TrackCollection"/>.
            </summary>
            <param name="value">The object to remove from the <see cref="T:TrackCollection"/>.
            This argument must be compatible with <see cref="T:Track"/>.
            This argument can be a null reference.
            </param>
            <exception cref="T:System.InvalidCastException"><paramref name="value"/>
            is not compatible with <see cref="T:Track"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:TrackCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>TrackCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Remove(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:TrackCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:TrackCollection"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than <see cref="P:TrackCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:TrackCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>TrackCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.RemoveAt(System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:TrackCollection.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes the specified range of elements from the <see cref="T:TrackCollection"/>.
            </summary>
            <param name="index">The zero-based starting index of the range
            of elements to remove.</param>
            <param name="count">The number of elements to remove.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> and <paramref name="count"/> do not denote a
            valid range of elements in the <see cref="T:TrackCollection"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="count"/> is less than zero.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:TrackCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>TrackCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:TrackCollection.Reverse">
            <overloads>
            Reverses the order of the elements in the 
            <see cref="T:TrackCollection"/> or a portion of it.
            </overloads>
            <summary>
            Reverses the order of the elements in the entire <see cref="T:TrackCollection"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:TrackCollection"/> is read-only.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Reverse"/> for details.</remarks>
        </member>
        <member name="M:TrackCollection.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverses the order of the elements in the specified range.
            </summary>
            <param name="index">The zero-based starting index of the range
            of elements to reverse.</param>
            <param name="count">The number of elements to reverse.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> and <paramref name="count"/> do not denote a
            valid range of elements in the <see cref="T:TrackCollection"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="count"/> is less than zero.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:TrackCollection"/> is read-only.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Reverse"/> for details.</remarks>
        </member>
        <member name="M:TrackCollection.Sort">
            <overloads>
            Sorts the elements in the <see cref="T:TrackCollection"/> or a portion of it.
            </overloads>
            <summary>
            Sorts the elements in the entire <see cref="T:TrackCollection"/>
            using the <see cref="T:System.IComparable"/> implementation of each element.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:TrackCollection"/> is read-only.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Sort"/> for details.</remarks>
        </member>
        <member name="M:TrackCollection.Sort(System.Collections.IComparer)">
            <summary>
            Sorts the elements in the entire <see cref="T:TrackCollection"/>
            using the specified <see cref="T:System.Collections.IComparer"/> interface.
            </summary>
            <param name="comparer">
            <para>The <see cref="T:System.Collections.IComparer"/> implementation to use when comparing elements.</para>
            <para>-or-</para>
            <para>A null reference to use the <see cref="T:System.IComparable"/> implementation 
            of each element.</para></param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:TrackCollection"/> is read-only.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Sort"/> for details.</remarks>
        </member>
        <member name="M:TrackCollection.Sort(System.Int32,System.Int32,System.Collections.IComparer)">
            <summary>
            Sorts the elements in the specified range 
            using the specified <see cref="T:System.Collections.IComparer"/> interface.
            </summary>
            <param name="index">The zero-based starting index of the range
            of elements to sort.</param>
            <param name="count">The number of elements to sort.</param>
            <param name="comparer">
            <para>The <see cref="T:System.Collections.IComparer"/> implementation to use when comparing elements.</para>
            <para>-or-</para>
            <para>A null reference to use the <see cref="T:System.IComparable"/> implementation 
            of each element.</para></param>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> and <paramref name="count"/> do not denote a
            valid range of elements in the <see cref="T:TrackCollection"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="count"/> is less than zero.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:TrackCollection"/> is read-only.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Sort"/> for details.</remarks>
        </member>
        <member name="M:TrackCollection.Synchronized(TrackCollection)">
            <summary>
            Returns a synchronized (thread-safe) wrapper
            for the specified <see cref="T:TrackCollection"/>.
            </summary>
            <param name="collection">The <see cref="T:TrackCollection"/> to synchronize.</param>
            <returns>
            A synchronized (thread-safe) wrapper around <paramref name="collection"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is a null reference.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Synchronized(System.Collections.IList)"/> for details.</remarks>
        </member>
        <member name="M:TrackCollection.ToArray">
            <summary>
            Copies the elements of the <see cref="T:TrackCollection"/> to a new
            <see cref="T:System.Array"/> of <see cref="T:Track"/> elements.
            </summary>
            <returns>A one-dimensional <see cref="T:System.Array"/> of <see cref="T:Track"/>
            elements containing copies of the elements of the <see cref="T:TrackCollection"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.ToArray"/> for details.</remarks>
        </member>
        <member name="M:TrackCollection.TrimToSize">
            <summary>
            Sets the capacity to the actual number of elements in the <see cref="T:TrackCollection"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:TrackCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>TrackCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.TrimToSize"/> for details.</remarks>
        </member>
        <member name="M:TrackCollection.Unique(TrackCollection)">
            <summary>
            Returns a wrapper for the specified <see cref="T:TrackCollection"/>
            ensuring that all elements are unique.
            </summary>
            <param name="collection">The <see cref="T:TrackCollection"/> to wrap.</param>    
            <returns>
            A wrapper around <paramref name="collection"/> ensuring that all elements are unique.
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="collection"/> contains duplicate elements.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is a null reference.</exception>
            <remarks><para>
            The <b>Unique</b> wrapper provides a set-like collection by ensuring
            that all elements in the <see cref="T:TrackCollection"/> are unique.
            </para><para>
            <b>Unique</b> raises an <see cref="T:System.ArgumentException"/> if the specified 
            <paramref name="collection"/> contains any duplicate elements. The returned
            wrapper raises a <see cref="T:System.NotSupportedException"/> whenever the user attempts 
            to add an element that is already contained in the <b>TrackCollection</b>.
            </para><para>
            <strong>Note:</strong> The <b>Unique</b> wrapper reflects any changes made
            to the underlying <paramref name="collection"/>, including the possible
            creation of duplicate elements. The uniqueness of all elements is therefore
            no longer assured if the underlying collection is manipulated directly.
            </para></remarks>
        </member>
        <member name="P:CSFreeDBLib.FreeDB.FreeDBUserName">
            <summary>
            The FreeDB server user name.
            </summary>
        </member>
        <member name="P:CSFreeDBLib.FreeDB.FreeDBHostname">
            <summary>
            The FreeDB host.
            </summary>
        </member>
        <member name="P:CSFreeDBLib.FreeDB.FreeDBClientName">
            <summary>
            The FreeDB client name.
            </summary>
        </member>
        <member name="P:CSFreeDBLib.FreeDB.FreeDBVersion">
            <summary>
            The FreeDB version.
            </summary>
        </member>
        <member name="P:CSFreeDBLib.FreeDB.FreeDBSiteAddress">
            <summary>
            The FreeDB site URL address.
            </summary>
        </member>
        <member name="M:CSFreeDBLib.FreeDB.RaiseError(System.Exception)">
            <summary>
            Raise Error
            </summary>
            <param name="ex">The error exception</param>
        </member>
        <member name="M:CSFreeDBLib.FreeDB.GetFreeDBInfo(System.Int32)">
            <summary>
            Get the information about the Audio CD using events.
            </summary>
            <param name="DriveIndex"></param>
        </member>
        <member name="M:CSFreeDBLib.FreeDB.GetFreeDBInfoAsync(System.Int32)">
            <summary>
            Get the information about the Audio CD using the Async technique.
            </summary>
            <param name="DriveIndex"></param>
            <returns></returns>
        </member>
        <member name="F:CSFreeDBLib.FreeDB.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSFreeDBLib.FreeDB.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CSFreeDBLib.FreeDB.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CSID3TagsLib.ImageType">
            <summary>
            The image type of the image tag. This can be: Other, FileIcon, OtherFileIcon, FrontCover, BackCover, LeafletPage, Media, LeadArtist, Artist, Conductor, Band, Composer, Lyricist, RecordingLocation, DuringRecording, DuringPerformance, MovieScreenCapture, ColoredFish, Illustration, BandLogo and PublisherLogo.
            </summary>
        </member>
        <member name="T:CSID3TagsLib.TagTypes">
            <summary>
            The tag types list.
            </summary>
        </member>
        <member name="P:CSID3TagsLib.ID3TagsLib.TagComposers">
            <summary>
            A list of strings for the TagComposers of the opened multimedia file.
            </summary>
        </member>
        <member name="P:CSID3TagsLib.ID3TagsLib.TagArtists">
            <summary>
            A list of strings for the TagArtists of the opened multimedia file.
            </summary>
        </member>
        <member name="P:CSID3TagsLib.ID3TagsLib.TagPerformers">
            <summary>
            A list of strings for the TagPerformers of the opened multimedia file. In some cases this tag will be the TagArtists tag.
            </summary>
        </member>
        <member name="P:CSID3TagsLib.ID3TagsLib.TagGenres">
            <summary>
            A list of strings for the TagComposers of the opened multimedia file.
            </summary>
        </member>
        <member name="P:CSID3TagsLib.ID3TagsLib.TagImages">
            <summary>
            A list of ImageTag class for the TagImages of the opened multimedia file.
            </summary>
        </member>
        <member name="P:CSID3TagsLib.ID3TagsLib.FileName">
            <summary>
            The file name of the opened multimedia file.
            </summary>
        </member>
        <member name="P:CSID3TagsLib.ID3TagsLib.TagTitle">
            <summary>
            The TagTitle tag of the opened multimedia file.
            </summary>
        </member>
        <member name="P:CSID3TagsLib.ID3TagsLib.TagLyrics">
            <summary>
            The lyrics of the opened multimedia file.
            </summary>
        </member>
        <member name="P:CSID3TagsLib.ID3TagsLib.TagAlbum">
            <summary>
            The album name of the opened multimedia file.
            </summary>
        </member>
        <member name="P:CSID3TagsLib.ID3TagsLib.TagComment">
            <summary>
            The comment of the opened multimedia file.
            </summary>
        </member>
        <member name="P:CSID3TagsLib.ID3TagsLib.TagCopyright">
            <summary>
            The copyright of the opened multimedia file.
            </summary>
        </member>
        <member name="P:CSID3TagsLib.ID3TagsLib.TagYear">
            <summary>
            The created year of the opened multimedia file.
            </summary>
        </member>
        <member name="P:CSID3TagsLib.ID3TagsLib.TagTrack">
            <summary>
            The Track number of the opened multimedia file.
            </summary>
        </member>
        <member name="P:CSID3TagsLib.ID3TagsLib.FileProperties">
            <summary>
            The properties of the opened multimedia file.
            </summary>
        </member>
        <member name="P:CSID3TagsLib.ID3TagsLib.RatingStars">
            <summary>
            The rating stars of the opened multimedia file. This value can be 0 (unrated) to 5 (best).
            </summary>
        </member>
        <member name="P:CSID3TagsLib.ID3TagsLib.TagRating">
            <summary>
            The rating value of the opened multimedia file. This value can be 0 (unrated) to 255 (best).
            </summary>
        </member>
        <member name="P:CSID3TagsLib.ID3TagsLib.RatingUser">
            <summary>
            The user of the rating tag. The default value is: "Windows Media Player 9 Series".
            </summary>
        </member>
        <member name="M:CSID3TagsLib.ID3TagsLib.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CSID3TagsLib.ID3TagsLib.ClearAllTags">
            <summary>
            Clear all the tags of the selected multimedia file.
            </summary>
        </member>
        <member name="M:CSID3TagsLib.ID3TagsLib.ClearTag(CSID3TagsLib.TagTypes)">
            <summary>
            Remove a tag type from the opened multimedia file.
            </summary>
        </member>
        <member name="M:CSID3TagsLib.ID3TagsLib.Init(System.String)">
            <summary>
            Init the library with your registration key. Use 'Trial Mode.' on trial. This function must be call before using any functionality of the library.
            </summary>
            <param name="sKey"></param>
            <returns></returns>
        </member>
        <member name="M:CSID3TagsLib.ID3TagsLib.Open(System.String)">
            <summary>
            Open a multimedia file. You can add/get/set tags only after calling this function. The supported format are: avi, mp3, mpc, mp4, asf, aiff, aif, aifc, tta, wv, ogg, flac, spx, opus, ape, xiph, wma, jpg, jpeg, png, mpg, mpeg and many other multimedia files.
            </summary>
            <param name="file_name"></param>
        </member>
        <member name="M:CSID3TagsLib.ID3TagsLib.Set">
            <summary>
            Set the ID3 tags to the opened multimedia files.
            </summary>
        </member>
        <member name="M:CSID3TagsLib.ID3TagsLib.AddImageFromFile(System.String,System.String,CSID3TagsLib.ImageType)">
            <summary>
            Set the ID3 tags to the opened multimedia files.
            </summary>
        </member>
        <member name="F:CSID3TagsLib.ID3TagsLib.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSID3TagsLib.ID3TagsLib.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CSID3TagsLib.ID3TagsLib.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Microncode.Lic.frmLicense.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Microncode.Lic.frmLicense.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Microncode.Lic.frmLicense.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Microncode.Lic.LicenseLib.CheckLicense(System.Windows.Forms.IWin32Window,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Check the license of the library. If the registration is OK a MessageBox will be display with a message 'The registration is OK.', otherwise, a registration window will be display with an instructions of register the library.
            </summary>
        </member>
        <member name="T:Options.Core.FileProperties">
            <summary>
            File properties.
            </summary>
        </member>
        <member name="P:Options.Core.FileProperties.Length">
            <summary>
            Length.
            </summary>
        </member>
        <member name="P:Options.Core.FileProperties.WaveFormat">
            <summary>
            Format.
            </summary>
        </member>
        <member name="P:Options.Core.FileProperties.SizeByte">
            <summary>
            The size in byte.
            </summary>
        </member>
        <member name="T:Options.Core.FileSelectorTypeEditor">
            <summary>
            Customer UITypeEditor that pops up a
            file selector dialog
            </summary>
        </member>
        <member name="T:Options.Core.ListTypeConverterIn">
            <summary>
            Get input device type
            </summary>
        </member>
        <member name="T:Options.Core.ListTypeConverterOut">
            <summary>
            Get output device type
            </summary>
        </member>
        <member name="T:Options.Core.WaveFormat">
            <summary>
            The wave format.
            </summary>
        </member>
        <member name="P:Options.Core.WaveFormat.Format">
            <summary>
            Format.
            </summary>
        </member>
        <member name="P:Options.Core.WaveFormat.Channels">
            <summary>
            Channels.
            </summary>
        </member>
        <member name="P:Options.Core.WaveFormat.SampleRate">
            <summary>
            SampleRate
            </summary>
        </member>
        <member name="P:Options.Core.WaveFormat.BytesPerSecond">
            <summary>
            BytesPerSecond
            </summary>
        </member>
        <member name="P:Options.Core.WaveFormat.BlockAlign">
            <summary>
            BlockAlign
            </summary>
        </member>
        <member name="P:Options.Core.WaveFormat.BitsPerSample">
            <summary>
            BitsPerSample
            </summary>
        </member>
        <member name="P:Options.Core.WaveFormat.ExtraSize">
            <summary>
            ExtraSize
            </summary>
        </member>
        <member name="P:Options.Core.WaveFormat.BytesPerSample">
            <summary>
            BytesPerSample
            </summary>
        </member>
        <member name="P:Options.Core.WaveFormat.BytesPerBlock">
            <summary>
            BytesPerBlock
            </summary>
        </member>
        <member name="T:Options.Core.ListTypeCDDVDDrives">
            <summary>
            Get input device type
            </summary>
        </member>
        <member name="P:CSAudioCDRipper.AudioCDRipper.Drives">
            <summary>
            The audio device source.
            </summary>
        </member>
        <member name="P:CSAudioCDRipper.AudioCDRipper.SelectedDriveIndex">
            <summary>
            The selected CD/DVD index to rip from.
            </summary>
        </member>
        <member name="P:CSAudioCDRipper.AudioCDRipper.About">
            <summary>
            The about form of the control.
            </summary>
        </member>
        <member name="P:CSAudioCDRipper.AudioCDRipper.OperationState">
            <summary>
            The operation state of the control. This can be Ready, Running and Paused.
            </summary>
        </member>
        <member name="P:CSAudioCDRipper.AudioCDRipper.FileProperties">
            <summary>
            The properties of the opened media file.
            </summary>
        </member>
        <member name="P:CSAudioCDRipper.AudioCDRipper.SourceTracks">
            <summary>
            A list of ImageTag class for the TagImages of the opened multimedia file.
            </summary>
        </member>
        <member name="P:CSAudioCDRipper.AudioCDRipper.Bitrate">
            <summary>
            The bitrate of the destination audio file.
            </summary>
        </member>
        <member name="P:CSAudioCDRipper.AudioCDRipper.BitrateVal">
            <summary>
            Set the bitrate of the destination audio file by value.
            </summary>
        </member>
        <member name="P:CSAudioCDRipper.AudioCDRipper.Format">
            <summary>
            The format of the destination audio file.
            </summary>
        </member>
        <member name="P:CSAudioCDRipper.AudioCDRipper.Samplerate">
            <summary>
            The samplerate of the destination audio file.
            </summary>
        </member>
        <member name="P:CSAudioCDRipper.AudioCDRipper.SamplerateVal">
            <summary>
            The samplerate of the destination audio file by value.
            </summary>
        </member>
        <member name="P:CSAudioCDRipper.AudioCDRipper.Bits">
            <summary>
            The bit-depth of the destination audio file (for WAV format only).
            </summary>
        </member>
        <member name="P:CSAudioCDRipper.AudioCDRipper.Channels">
            <summary>
            The channels of the destination audio file.
            </summary>
        </member>
        <member name="P:CSAudioCDRipper.AudioCDRipper.DestinatioFile">
            <summary>
            The destination file.
            </summary>
        </member>
        <member name="P:CSAudioCDRipper.AudioCDRipper.ACMTag">
            <summary>
            The selected ACM tag (for ACM encoding). The default tag is PCM.
            </summary>
        </member>
        <member name="P:CSAudioCDRipper.AudioCDRipper.ACMFormat">
            <summary>
            The selected ACM format of the selected ACM tag(for ACM encoding). The default format is 44.100 kHz, 16 Bit, Stereo.
            </summary>
        </member>
        <member name="P:CSAudioCDRipper.AudioCDRipper.CurrentTrack">
            <summary>
            The current processing track number.
            </summary>
        </member>
        <member name="P:CSAudioCDRipper.AudioCDRipper.UserName">
            <summary>
            The user name.
            </summary>
        </member>
        <member name="P:CSAudioCDRipper.AudioCDRipper.UserKey">
            <summary>
            The user key.
            </summary>
        </member>
        <member name="P:CSAudioCDRipper.AudioCDRipper.TagComposers">
            <summary>
            A list of strings for the TagComposers of the opened multimedia file.
            </summary>
        </member>
        <member name="P:CSAudioCDRipper.AudioCDRipper.TagArtists">
            <summary>
            A list of strings for the TagArtists of the opened multimedia file.
            </summary>
        </member>
        <member name="P:CSAudioCDRipper.AudioCDRipper.TagPerformers">
            <summary>
            A list of strings for the TagPerformers of the opened multimedia file. In some cases this tag will be the TagArtists tag.
            </summary>
        </member>
        <member name="P:CSAudioCDRipper.AudioCDRipper.TagGenres">
            <summary>
            A list of strings for the TagGenres of the opened multimedia file.
            </summary>
        </member>
        <member name="P:CSAudioCDRipper.AudioCDRipper.TagImages">
            <summary>
            A list of ImageTag class for the TagImages of the opened multimedia file.
            </summary>
        </member>
        <member name="P:CSAudioCDRipper.AudioCDRipper.FileNameID3Tags">
            <summary>
            The file name of the opened multimedia file.
            </summary>
        </member>
        <member name="P:CSAudioCDRipper.AudioCDRipper.TagTitle">
            <summary>
            The TagTitle tag of the opened multimedia file.
            </summary>
        </member>
        <member name="P:CSAudioCDRipper.AudioCDRipper.TagLyrics">
            <summary>
            The lyrics of the opened multimedia file.
            </summary>
        </member>
        <member name="P:CSAudioCDRipper.AudioCDRipper.TagAlbum">
            <summary>
            The album name of the opened multimedia file.
            </summary>
        </member>
        <member name="P:CSAudioCDRipper.AudioCDRipper.TagComment">
            <summary>
            The comment of the opened multimedia file.
            </summary>
        </member>
        <member name="P:CSAudioCDRipper.AudioCDRipper.TagCopyright">
            <summary>
            The copyright of the opened multimedia file.
            </summary>
        </member>
        <member name="P:CSAudioCDRipper.AudioCDRipper.TagYear">
            <summary>
            The created year of the opened multimedia file.
            </summary>
        </member>
        <member name="P:CSAudioCDRipper.AudioCDRipper.TagTrack">
            <summary>
            The Track number of the opened multimedia file.
            </summary>
        </member>
        <member name="P:CSAudioCDRipper.AudioCDRipper.TagRating">
            <summary>
            The rating value of the opened multimedia file. This value can be 0 (unrated) to 255 (best).
            </summary>
        </member>
        <member name="P:CSAudioCDRipper.AudioCDRipper.RatingUser">
            <summary>
            The user of the rating tag. The default value is: "Windows Media Player 9 Series".
            </summary>
        </member>
        <member name="P:CSAudioCDRipper.AudioCDRipper.RatingStars">
            <summary>
            The rating stars of the opened multimedia file. This value can be 0 (unrated) to 5 (best).
            </summary>
        </member>
        <member name="T:CSAudioCDRipper.AudioCDRipper.TrackInfo">
            <summary>
            The struct of the track information.
            </summary>
        </member>
        <member name="M:CSAudioCDRipper.AudioCDRipper.GetDecoderModes">
            <summary>
            Get the supported channels to a list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSAudioCDRipper.AudioCDRipper.GetChannels">
            <summary>
            Get the supported channels to a list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSAudioCDRipper.AudioCDRipper.GetBits">
            <summary>
            Get the supported bits to a list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSAudioCDRipper.AudioCDRipper.GetSamplerates">
            <summary>
            Get the supported samplerates to a list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSAudioCDRipper.AudioCDRipper.GetFormats">
            <summary>
            Get the supported formats to a list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSAudioCDRipper.AudioCDRipper.GetBitrates">
            <summary>
            Get the supported bitrates to a list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSAudioCDRipper.AudioCDRipper.CDIsReady(System.Int32)">
            <summary>
            Check if the CD drive is ready.
            </summary>
            <param name="DriveIndex">The CD drive index.</param>
            <returns></returns>
        </member>
        <member name="M:CSAudioCDRipper.AudioCDRipper.EjectCD(System.Int32)">
            <summary>
            Eject the CD drive door.
            </summary>
            <param name="DriveIndex">The CD drive index.</param>
            <returns></returns>
        </member>
        <member name="M:CSAudioCDRipper.AudioCDRipper.CloseCD(System.Int32)">
            <summary>
            Close the CD drive door.
            </summary>
            <param name="DriveIndex">The CD drive index.</param>
            <returns></returns>
        </member>
        <member name="M:CSAudioCDRipper.AudioCDRipper.GetDevices">
            <summary>
            Get a list of the CD devices that installed on the local machine.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSAudioCDRipper.AudioCDRipper.GetTracks(System.Int32)">
            <summary>
            Get all the tracks of the audio CD.
            </summary>
            <param name="DriveIndex">The CD drive index.</param>
            <returns></returns>
        </member>
        <member name="M:CSAudioCDRipper.AudioCDRipper.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CSAudioCDRipper.AudioCDRipper.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:CSAudioCDRipper.AudioCDRipper.CheckLicense(System.Boolean)">
            <summary>
            Check the user license of the component. 
            </summary>
            <param name="DisplayRegistrationWindow">Display the registration form or not.</param>
            <returns>True if the license is OK, false if not.</returns>
        </member>
        <member name="M:CSAudioCDRipper.AudioCDRipper.RaiseError(System.Exception)">
            <summary>
            Raise Error
            </summary>
            <param name="ex">The error exception</param>
        </member>
        <member name="M:CSAudioCDRipper.AudioCDRipper.Cancel">
            <summary>
            Cancel the current operation.
            </summary>
        </member>
        <member name="M:CSAudioCDRipper.AudioCDRipper.Pause">
            <summary>
            Pause the current operation.
            </summary>
        </member>
        <member name="M:CSAudioCDRipper.AudioCDRipper.Resume">
            <summary>
            Resume the current operation.
            </summary>
        </member>
        <member name="M:CSAudioCDRipper.AudioCDRipper.Rip">
            <summary>
            Start the operation.
            </summary>
        </member>
        <member name="M:CSAudioCDRipper.AudioCDRipper.RipACM_APE_OGG">
            <summary>
            Rip the tracks to AAC MP2 MP3 and WMA using the CSCore media foundation
            </summary>
        </member>
        <member name="M:CSAudioCDRipper.AudioCDRipper.RipAAC_MP2_MP3_WMA">
            <summary>
            Rip the tracks to AAC MP2 MP3 and WMA using the CSCore media foundation
            </summary>
        </member>
        <member name="M:CSAudioCDRipper.AudioCDRipper.RipWAV">
            <summary>
            Rip the tracks to WAV CSCore media foundation
            </summary>
        </member>
        <member name="M:CSAudioCDRipper.AudioCDRipper.backgroundWorker_DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            Run the operation in the background under a new process.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSAudioCDRipper.AudioCDRipper.backgroundWorker_ProgressChanged(System.Object,System.ComponentModel.ProgressChangedEventArgs)">
            <summary>
            Update the user interface with the current progress.
            </summary>
            <param name="sender">The sender object</param>
            <param name="e">ProgressChangedEventArgs</param>
        </member>
        <member name="M:CSAudioCDRipper.AudioCDRipper.backgroundWorker_RunWorkerCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
            <summary>
            Notification that the burn background thread has completed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSAudioCDRipper.AudioCDRipper.ClearAllTags(System.String)">
            <summary>
            Clear all the tags of the selected multimedia file.
            </summary>
        </member>
        <member name="M:CSAudioCDRipper.AudioCDRipper.ClearTag(System.String,CSID3TagsLib.TagTypes)">
            <summary>
            Remove a tag type from the opened multimedia file.
            </summary>
        </member>
        <member name="M:CSAudioCDRipper.AudioCDRipper.OpenID3Tags(System.String)">
            <summary>
            Open a multimedia file. You can add/get/set tags only after calling this function. The supported format are: avi, mp3, mpc, mp4, asf, aiff, aif, aifc, tta, wv, ogg, flac, spx, opus, ape, xiph, wma, jpg, jpeg, png, mpg, mpeg and many other multimedia files.
            </summary>
            <param name="file_name"></param>
        </member>
        <member name="M:CSAudioCDRipper.AudioCDRipper.SetID3Tags(System.String)">
            <summary>
            Set the ID3 tags to the opened multimedia files.
            </summary>
        </member>
        <member name="M:CSAudioCDRipper.AudioCDRipper.AddImageFromFile(System.String,System.String,CSID3TagsLib.ImageType)">
            <summary>
            Set the ID3 tags to the opened multimedia files.
            </summary>
        </member>
        <member name="M:CSAudioCDRipper.AudioCDRipper.GetEnumValue(System.Enum)">
            <summary>
            Get the value of the selected item of the Enum
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CSAudioCDRipper.AudioCDRipper.GetEnumValue``1(System.String)">
            <summary>
            Get the value of the selected item of the Enum
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CSAudioCDRipper.AudioCDRipper.GetACMTags(CSAudioCDRipper.ACM_FORMAT,System.Int32,System.Int32,System.Int16,System.Int16)">
            <summary>
            Get ACM tags according to the ACMFormat. You can also set the audio propitiates to get the best results according to the source audio file.
            </summary>
            <param name="ACMFormat"></param>
            <param name="FormatTag"></param>
            <param name="SamplesPerSec"></param>
            <param name="Channels"></param>
            <param name="BitsPerSample"></param>
            <returns></returns>
        </member>
        <member name="M:CSAudioCDRipper.AudioCDRipper.GetACMFormats(System.String)">
            <summary>
            Get the ACM formats according to the ACMTag.
            </summary>
            <param name="ACMTag">The ACM codec tag to get the supported formats for.</param>
            <returns></returns>
        </member>
        <member name="F:CSAudioCDRipper.AudioCDRipper.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSAudioCDRipper.AudioCDRipper.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CSAudioCDRipper.AudioCDRipper.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CSAudioCDRipper.FFMpegFormat">
            <summary>
            The FFMpeg format type.
            </summary>
        </member>
        <member name="T:CSAudioCDRipper.OperationState">
            <summary>
            The operation state of the control. This can be Ready, Running and Paused.
            </summary>
        </member>
        <member name="T:CSAudioCDRipper.ACM_FORMAT">
            <summary>
            The ACM format mode. You can get the ACM codecs and fromat acording to the value of this enum.
            </summary>
        </member>
        <member name="T:CSAudioCDRipper.DecodeMode">
            <summary>
            The decoder mode of the operation. this can be the LocalCodecs which will use the codecs that installed on the system, or FFMpeg which will use the FFMpeg libraries.If you decide to use the FFMpeg libraries, please make sure the FFMpeg folder with dll files is existed under the output directory of the project.
            </summary>
        </member>
        <member name="T:CSAudioCDRipper.Bitrate">
            <summary>
            The bitrate of the destination audio file.
            </summary>
        </member>
        <member name="T:CSAudioCDRipper.Samplerate">
            <summary>
            The samplerate of the destination audio file.
            </summary>
        </member>
        <member name="T:CSAudioCDRipper.Bits">
            <summary>
            The bit-depth of the destination audio file.
            </summary>
        </member>
        <member name="T:CSAudioCDRipper.Channels">
            <summary>
            The number of channels of the destination audio file.
            </summary>
        </member>
        <member name="T:CSAudioCDRipper.Format">
            <summary>
            The format of the destination file, this can be AAC, ACM (WAV), APE, MP2, MP3, OGG, WAV (PCM), and WMA.
            </summary>
        </member>
        <member name="T:CSAudioCDRipper.PercentArgs">
            <summary>
            The variant of the progress event.
            </summary>
        </member>
        <member name="T:CSAudioCDRipper.MessageArgs">
            <summary>
            The variant of the error event.
            </summary>
        </member>
        <member name="F:CSAudioCDRipper.FreeDB.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:CSAudioCDRipper.FreeDB.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CSAudioCDRipper.FreeDB.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CSAudioCDRipper.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:CSAudioCDRipper.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:CSAudioCDRipper.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
    </members>
</doc>
